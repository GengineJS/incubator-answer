{"version":3,"file":"static/js/lezer.6ab99c0b.js","mappings":"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","sources":["../node_modules/.pnpm/registry.npmmirror.com+@lezer+common@1.2.1/node_modules/@lezer/common/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+css@1.1.8/node_modules/@lezer/css/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+highlight@1.2.0/node_modules/@lezer/highlight/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+html@1.3.10/node_modules/@lezer/html/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+javascript@1.4.16/node_modules/@lezer/javascript/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+lr@1.4.1/node_modules/@lezer/lr/dist/index.js","../node_modules/.pnpm/registry.npmmirror.com+@lezer+markdown@1.3.0/node_modules/@lezer/markdown/dist/index.js"],"sourcesContent":["/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n    /**\n    Create a new node prop type.\n    */\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /**\n    This is meant to be used with\n    [`NodeSet.extend`](#common.NodeSet.extend) or\n    [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    prop values for each node type in the set. Takes a [match\n    object](#common.NodeType^match) or function that returns undefined\n    if the node type doesn't get this prop, and the prop's value if\n    it does.\n    */\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({ deserialize: value => {\n        if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\")\n            throw new RangeError(\"Invalid value for isolate: \" + value);\n        return value || \"auto\";\n    } });\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({ perNode: true });\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n    constructor(\n    /**\n    The inner tree.\n    */\n    tree, \n    /**\n    If this is null, this tree replaces the entire node (it will\n    be included in the regular iteration instead of its host\n    node). If not, only the given ranges are considered to be\n    covered by this tree. This is used for trees that are mixed in\n    a way that isn't strictly hierarchical. Such mounted trees are\n    only entered by [`resolveInner`](#common.Tree.resolveInner)\n    and [`enter`](#common.SyntaxNode.enter).\n    */\n    overlay, \n    /**\n    The parser used to create this subtree.\n    */\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n    /**\n    @internal\n    */\n    static get(tree) {\n        return tree && tree.props && tree.props[NodeProp.mounted.id];\n    }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the node type. Not necessarily unique, but if the\n    grammar was written properly, different node types with the\n    same name within a node set should play the same semantic\n    role.\n    */\n    name, \n    /**\n    @internal\n    */\n    props, \n    /**\n    The id of this node in its set. Corresponds to the term ids\n    used in the parser.\n    */\n    id, \n    /**\n    @internal\n    */\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /**\n    Define a node type.\n    */\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /**\n    Retrieves a node prop for this type. Will return `undefined` if\n    the prop isn't present on this node.\n    */\n    prop(prop) { return this.props[prop.id]; }\n    /**\n    True when this is the top node of a grammar.\n    */\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /**\n    True when this node is produced by a skip rule.\n    */\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /**\n    Indicates whether this is an error node.\n    */\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /**\n    When true, this node type doesn't correspond to a user-declared\n    named node, for example because it is used to cache repetition.\n    */\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /**\n    Returns true when this node's name or one of its\n    [groups](#common.NodeProp^group) matches the given string.\n    */\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /**\n    Create a function from node types to arbitrary values by\n    specifying an object whose property names are node or\n    [group](#common.NodeProp^group) names. Often useful with\n    [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    names, separated by spaces, in a single property name to map\n    multiple node names to a single value.\n    */\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n    /**\n    Create a set with the given types. The `id` property of each\n    type should correspond to its position within the array.\n    */\n    constructor(\n    /**\n    The node types in this set, by id.\n    */\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /**\n    Create a copy of this set with some node properties added. The\n    arguments to this method can be created with\n    [`NodeProp.add`](#common.NodeProp.add).\n    */\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n    /**\n    When enabled, iteration will only visit [`Tree`](#common.Tree)\n    objects, not nodes packed into\n    [`TreeBuffer`](#common.TreeBuffer)s.\n    */\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /**\n    Enable this to make iteration include anonymous nodes (such as\n    the nodes that wrap repeated grammar constructs into a balanced\n    tree).\n    */\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /**\n    By default, regular [mounted](#common.NodeProp^mounted) nodes\n    replace their base node in iteration. Enable this to ignore them\n    instead.\n    */\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /**\n    This option only applies in\n    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    library to not enter mounted overlays if one covers the given\n    position.\n    */\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n    /**\n    Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    */\n    constructor(\n    /**\n    The type of the top node.\n    */\n    type, \n    /**\n    This node's child nodes.\n    */\n    children, \n    /**\n    The positions (offsets relative to the start of this tree) of\n    the children.\n    */\n    positions, \n    /**\n    The total length of this tree\n    */\n    length, \n    /**\n    Per-node [node props](#common.NodeProp) to associate with this node.\n    */\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /**\n        @internal\n        */\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let mounted = MountedTree.get(this);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    the tree. Mode can be used to [control](#common.IterMode) which\n    nodes the cursor visits.\n    */\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    at the given position and side (see\n    [`moveTo`](#common.TreeCursor.moveTo).\n    */\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) object for the top of the\n    tree.\n    */\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /**\n    Get the [syntax node](#common.SyntaxNode) at the given position.\n    If `side` is -1, this will move into nodes that end at the\n    position. If 1, it'll move into nodes that start at the\n    position. With 0, it'll only enter nodes that cover the position\n    from both sides.\n    \n    Note that this will not enter\n    [overlays](#common.MountedTree.overlay), and you often want\n    [`resolveInner`](#common.Tree.resolveInner) instead.\n    */\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /**\n    Like [`resolve`](#common.Tree.resolve), but will enter\n    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    pointing into the innermost overlaid tree at the given position\n    (with parent links going through all parent structure, including\n    the host trees).\n    */\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /**\n    In some situations, it can be useful to iterate through all\n    nodes around a position, including those in overlays that don't\n    directly cover the position. This method gives you an iterator\n    that will produce all nodes, from small to big, around the given\n    position.\n    */\n    resolveStack(pos, side = 0) {\n        return stackIterator(this, pos, side);\n    }\n    /**\n    Iterate over the tree and its children, calling `enter` for any\n    node that touches the `from`/`to` region (if given) before\n    running over such a node's children, and `leave` (if given) when\n    leaving the node. When `enter` returns `false`, that node will\n    not have its children iterated over (or `leave` called).\n    */\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /**\n    Get the value of the given [node prop](#common.NodeProp) for this\n    node. Works with both per-node and per-type props.\n    */\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /**\n    Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    format that can be passed to the [`Tree`](#common.Tree)\n    constructor.\n    */\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /**\n    Balance the direct children of this tree, producing a copy of\n    which may have children grouped into subtrees with type\n    [`NodeType.none`](#common.NodeType^none).\n    */\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /**\n    Build a tree from a postfix-ordered buffer of node information,\n    or a cursor over such a buffer.\n    */\n    static build(data) { return buildTree(data); }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n    /**\n    Create a tree buffer.\n    */\n    constructor(\n    /**\n    The buffer's content.\n    */\n    buffer, \n    /**\n    The total length of the group of nodes in the buffer.\n    */\n    length, \n    /**\n    The node set used in this buffer.\n    */\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /**\n    @internal\n    */\n    get type() { return NodeType.none; }\n    /**\n    @internal\n    */\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /**\n    @internal\n    */\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /**\n    @internal\n    */\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /**\n    @internal\n    */\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass BaseNode {\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    matchContext(context) {\n        return matchNodeContext(this, context);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        let scan = this.childBefore(pos), node = this;\n        while (scan) {\n            let last = scan.lastChild;\n            if (!last || last.to != scan.to)\n                break;\n            if (last.type.isError && last.from == last.to) {\n                node = scan;\n                scan = last.prevSibling;\n            }\n            else {\n                scan = last;\n            }\n        }\n        return node;\n    }\n    get node() { return this; }\n    get next() { return this.parent; }\n}\nclass TreeNode extends BaseNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        super();\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    /**\n    @internal\n    */\n    toString() { return this._tree.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        for (let found = false; !found;) {\n            found = cur.type.is(before);\n            if (!cur.nextSibling())\n                return result;\n        }\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode extends BaseNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        super();\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.context.buffer.childString(this.index); }\n}\nfunction iterStack(heads) {\n    if (!heads.length)\n        return null;\n    let pick = 0, picked = heads[0];\n    for (let i = 1; i < heads.length; i++) {\n        let node = heads[i];\n        if (node.from > picked.from || node.to < picked.to) {\n            picked = node;\n            pick = i;\n        }\n    }\n    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n    let newHeads = heads.slice();\n    if (next)\n        newHeads[pick] = next;\n    else\n        newHeads.splice(pick, 1);\n    return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n    constructor(heads, node) {\n        this.heads = heads;\n        this.node = node;\n    }\n    get next() { return iterStack(this.heads); }\n}\nfunction stackIterator(tree, pos, side) {\n    let inner = tree.resolveInner(pos, side), layers = null;\n    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n        if (scan.index < 0) { // This is an overlay root\n            let parent = scan.parent;\n            (layers || (layers = [inner])).push(parent.resolve(pos, side));\n            scan = parent;\n        }\n        else {\n            let mount = MountedTree.get(scan.tree);\n            // Relevant overlay branching off\n            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n            }\n        }\n    }\n    return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n    /**\n    Shorthand for `.type.name`.\n    */\n    get name() { return this.type.name; }\n    /**\n    @internal\n    */\n    constructor(node, \n    /**\n    @internal\n    */\n    mode = 0) {\n        this.mode = mode;\n        /**\n        @internal\n        */\n        this.buffer = null;\n        this.stack = [];\n        /**\n        @internal\n        */\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    /**\n    @internal\n    */\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /**\n    @internal\n    */\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /**\n    Move the cursor to this node's first child. When this returns\n    false, the node has no child, and the cursor has not been moved.\n    */\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to this node's last child.\n    */\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to the first child that ends after `pos`.\n    */\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /**\n    Move to the last child that starts before `pos`.\n    */\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /**\n    Move the cursor to the child around `pos`. If side is -1 the\n    child may end at that position, when 1 it may start there. This\n    will also enter [overlaid](#common.MountedTree.overlay)\n    [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    set to false.\n    */\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /**\n    Move to the node's parent node, if this isn't the top node.\n    */\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /**\n    @internal\n    */\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /**\n    Move to this node's next sibling, if any.\n    */\n    nextSibling() { return this.sibling(1); }\n    /**\n    Move to this node's previous sibling, if any.\n    */\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /**\n    Move to the next node in a\n    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    traversal, going from a node to its first child or, if the\n    current node is empty or `enter` is false, its next sibling or\n    the next sibling of the first parent node that has one.\n    */\n    next(enter = true) { return this.move(1, enter); }\n    /**\n    Move to the next node in a last-to-first pre-order traveral. A\n    node is followed by its last child or, if it has none, its\n    previous sibling or the previous sibling of the first parent\n    node that has one.\n    */\n    prev(enter = true) { return this.move(-1, enter); }\n    /**\n    Move the cursor to the innermost node that covers `pos`. If\n    `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    it will enter nodes that start at `pos`.\n    */\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    position.\n    */\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /**\n    Get the [tree](#common.Tree) that represents the current node, if\n    any. Will return null when the node is in a [tree\n    buffer](#common.TreeBuffer).\n    */\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /**\n    Iterate over the current node and all its descendants, calling\n    `enter` when entering a node and `leave`, if given, when leaving\n    one. When `enter` returns `false`, any children of that node are\n    skipped, and `leave` isn't called for it.\n    */\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /**\n    Test whether the current node matches a given context—a sequence\n    of direct parent node names. Empty strings in the context array\n    are treated as wildcards.\n    */\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else if (depth > 2500 /* CutOff.Depth */) {\n                    takeFlatNode(start, endPos, localChildren, localPositions);\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function takeFlatNode(parentStart, minPos, children, positions) {\n        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n        let nodeCount = 0, stopAt = -1;\n        while (cursor.pos > minPos) {\n            let { id, start, end, size } = cursor;\n            if (size > 4) { // Not a leaf\n                cursor.next();\n            }\n            else if (stopAt > -1 && start < stopAt) {\n                break;\n            }\n            else {\n                if (stopAt < 0)\n                    stopAt = end - maxBufferLength;\n                nodes.push(id, start, end);\n                nodeCount++;\n                cursor.next();\n            }\n        }\n        if (nodeCount) {\n            let buffer = new Uint16Array(nodeCount * 4);\n            let start = nodes[nodes.length - 2];\n            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n                buffer[j++] = nodes[i];\n                buffer[j++] = nodes[i + 1] - start;\n                buffer[j++] = nodes[i + 2] - start;\n                buffer[j++] = j;\n            }\n            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n            positions.push(start - parentStart);\n        }\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /**\n    Set the value for this syntax node.\n    */\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /**\n    Retrieve value for this syntax node, if it exists in the map.\n    */\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /**\n    Set the value for the node that a cursor currently points to.\n    */\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /**\n    Retrieve the value for the node that a cursor currently points\n    to.\n    */\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n    /**\n    Construct a tree fragment. You'll usually want to use\n    [`addTree`](#common.TreeFragment^addTree) and\n    [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    calling this directly.\n    */\n    constructor(\n    /**\n    The start of the unchanged range pointed to by this fragment.\n    This refers to an offset in the _updated_ document (as opposed\n    to the original tree).\n    */\n    from, \n    /**\n    The end of the unchanged range.\n    */\n    to, \n    /**\n    The tree that this fragment is based on.\n    */\n    tree, \n    /**\n    The offset between the fragment's tree and the document that\n    this fragment can be used against. Add this when going from\n    document to tree positions, subtract it to go from tree to\n    document positions.\n    */\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /**\n    Whether the start of the fragment represents the start of a\n    parse, or the end of a change. (In the second case, it may not\n    be safe to reuse some nodes at the start, depending on the\n    parsing algorithm.)\n    */\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /**\n    Whether the end of the fragment represents the end of a\n    full-document parse, or the start of a change.\n    */\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /**\n    Create a set of fragments from a freshly parsed tree, or update\n    an existing set of fragments by replacing the ones that overlap\n    with a tree with content from the new tree. When `partial` is\n    true, the parse is treated as incomplete, and the resulting\n    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    true.\n    */\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /**\n    Apply a set of edits to an array of fragments, removing or\n    splitting fragments as necessary to remove edited ranges, and\n    adjusting offsets for fragments that moved.\n    */\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n    /**\n    Start a parse, returning a [partial parse](#common.PartialParse)\n    object. [`fragments`](#common.TreeFragment) can be passed in to\n    make the parse incremental.\n    \n    By default, the entire input is parsed. You can pass `ranges`,\n    which should be a sorted array of non-empty, non-overlapping\n    ranges, to parse only those ranges. The tree returned in that\n    case will start at `ranges[0].from`.\n    */\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /**\n    Run a full parse, returning the resulting tree.\n    */\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, from) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.from = from;\n    }\n}\nfunction checkRanges(ranges) {\n    if (!ranges.length || ranges.some(r => r.from >= r.to))\n        throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered;;) {\n            let enter = true, range;\n            if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n                enter = false;\n            }\n            else if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&\n                (cursor.from < cursor.to || !nest.overlay)) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay ||\n                        (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n                    if (ranges.length)\n                        checkRanges(ranges);\n                    if (ranges.length || !nest.overlay)\n                        this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)\n                            : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length) {\n                            checkRanges(ranges);\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n                        }\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, stack = [];\n    let buffer = node.context.buffer;\n    // Scan up to the nearest tree\n    do {\n        stack.push(cursor.index);\n        cursor.parent();\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let base = cursor.tree, i = base.children.indexOf(buffer);\n    let buf = base.children[i], b = buf.buffer, newStack = [i];\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length, stackPos) {\n        let targetI = stack[stackPos];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n        let from = b[targetI + 1], to = b[targetI + 2];\n        newStack.push(children.length);\n        let child = stackPos\n            ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)\n            : node.toTree();\n        children.push(child);\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n    // Move the cursor back to the target node\n    for (let index of newStack) {\n        let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];\n        cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n    }\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { ExternalTokenizer, LRParser, LocalTokenGroup } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst descendantOp = 99,\n  Unit = 1,\n  callee = 100,\n  identifier = 101,\n  VariableName = 2;\n\n/* Hand-written tokenizers for CSS tokens that can't be\n   expressed by Lezer's built-in tokenizer. */\n\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,\n               8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];\nconst colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,\n      hash = 35, percent = 37, ampersand = 38, backslash = 92, newline = 10;\n\nfunction isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }\n\nfunction isDigit(ch) { return ch >= 48 && ch <= 57 }\n\nconst identifiers = new ExternalTokenizer((input, stack) => {\n  for (let inside = false, dashes = 0, i = 0;; i++) {\n    let {next} = input;\n    if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {\n      if (!inside && (next != dash || i > 0)) inside = true;\n      if (dashes === i && next == dash) dashes++;\n      input.advance();\n    } else if (next == backslash && input.peek(1) != newline) {\n      input.advance();\n      if (input.next > -1) input.advance();\n      inside = true;\n    } else {\n      if (inside)\n        input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);\n      break\n    }\n  }\n});\n\nconst descendant = new ExternalTokenizer(input => {\n  if (space.includes(input.peek(-1))) {\n    let {next} = input;\n    if (isAlpha(next) || next == underscore || next == hash || next == period ||\n        next == bracketL || next == colon && isAlpha(input.peek(1)) ||\n        next == dash || next == ampersand)\n      input.acceptToken(descendantOp);\n  }\n});\n\nconst unitToken = new ExternalTokenizer(input => {\n  if (!space.includes(input.peek(-1))) {\n    let {next} = input;\n    if (next == percent) { input.advance(); input.acceptToken(Unit); }\n    if (isAlpha(next)) {\n      do { input.advance(); } while (isAlpha(input.next) || isDigit(input.next))\n      input.acceptToken(Unit);\n    }\n  }\n});\n\nconst cssHighlighting = styleTags({\n  \"AtKeyword import charset namespace keyframes media supports\": tags.definitionKeyword,\n  \"from to selector\": tags.keyword,\n  NamespaceName: tags.namespace,\n  KeyframeName: tags.labelName,\n  KeyframeRangeName: tags.operatorKeyword,\n  TagName: tags.tagName,\n  ClassName: tags.className,\n  PseudoClassName: tags.constant(tags.className),\n  IdName: tags.labelName,\n  \"FeatureName PropertyName\": tags.propertyName,\n  AttributeName: tags.attributeName,\n  NumberLiteral: tags.number,\n  KeywordQuery: tags.keyword,\n  UnaryQueryOp: tags.operatorKeyword,\n  \"CallTag ValueName\": tags.atom,\n  VariableName: tags.variableName,\n  Callee: tags.operatorKeyword,\n  Unit: tags.unit,\n  \"UniversalSelector NestingSelector\": tags.definitionOperator,\n  MatchOp: tags.compareOperator,\n  \"ChildOp SiblingOp, LogicOp\": tags.logicOperator,\n  BinOp: tags.arithmeticOperator,\n  Important: tags.modifier,\n  Comment: tags.blockComment,\n  ColorLiteral: tags.color,\n  \"ParenthesizedContent StringLiteral\": tags.string,\n  \":\": tags.punctuation,\n  \"PseudoOp #\": tags.derefOperator,\n  \"; ,\": tags.separator,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_callee = {__proto__:null,lang:32, \"nth-child\":32, \"nth-last-child\":32, \"nth-of-type\":32, \"nth-last-of-type\":32, dir:32, \"host-context\":32, url:60, \"url-prefix\":60, domain:60, regexp:60, selector:138};\nconst spec_AtKeyword = {__proto__:null,\"@import\":118, \"@media\":142, \"@charset\":146, \"@namespace\":150, \"@keyframes\":156, \"@supports\":168};\nconst spec_identifier = {__proto__:null,not:132, only:132};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f\",\n  stateData: \";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~\",\n  goto: \"-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e\",\n  nodeNames: \"⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles\",\n  maxTerm: 117,\n  nodeProps: [\n    [\"isolate\", -2,3,24,\"\"],\n    [\"openedBy\", 17,\"(\",32,\"[\",50,\"{\"],\n    [\"closedBy\", 18,\")\",33,\"]\",51,\"}\"]\n  ],\n  propSources: [cssHighlighting],\n  skippedNodes: [0,3,87],\n  repeatNodeCount: 11,\n  tokenData: \"J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}\",\n  tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup(\"m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~\", 28, 105)],\n  topRules: {\"StyleSheet\":[0,4],\"Styles\":[1,86]},\n  specialized: [{term: 100, get: (value) => spec_callee[value] || -1},{term: 58, get: (value) => spec_AtKeyword[value] || -1},{term: 101, get: (value) => spec_identifier[value] || -1}],\n  tokenPrec: 1200\n});\n\nexport { parser };\n","import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Mode.Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Mode.Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Mode.Opaque */; }\n    get inherit() { return this.mode == 1 /* Mode.Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Mode.Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter). Often, the higher-level\n[`highlightCode`](#highlight.highlightCode) function is easier to\nuse.\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\n/**\nHighlight the given tree with the given highlighter, calling\n`putText` for every piece of text, either with a set of classes or\nwith the empty string when unstyled, and `putBreak` for every line\nbreak.\n*/\nfunction highlightCode(code, tree, highlighter, putText, putBreak, from = 0, to = code.length) {\n    let pos = from;\n    function writeTo(p, classes) {\n        if (p <= pos)\n            return;\n        for (let text = code.slice(pos, p), i = 0;;) {\n            let nextBreak = text.indexOf(\"\\n\", i);\n            let upto = nextBreak < 0 ? text.length : nextBreak;\n            if (upto > i)\n                putText(text.slice(i, upto), classes);\n            if (nextBreak < 0)\n                break;\n            putBreak();\n            i = nextBreak + 1;\n        }\n        pos = p;\n    }\n    highlightTree(tree, highlighter, (from, to, classes) => {\n        writeTo(from, \"\");\n        writeTo(to, classes);\n    }, from, to);\n    writeTo(to, \"\");\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Mode.Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            if (mounted)\n                inheritedClass = \"\";\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightCode, highlightTree, styleTags, tagHighlighter, tags };\n","import { ContextTracker, ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { parseMixed } from '@lezer/common';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst scriptText = 54,\n  StartCloseScriptTag = 1,\n  styleText = 55,\n  StartCloseStyleTag = 2,\n  textareaText = 56,\n  StartCloseTextareaTag = 3,\n  EndTag = 4,\n  SelfClosingEndTag = 5,\n  StartTag = 6,\n  StartScriptTag = 7,\n  StartStyleTag = 8,\n  StartTextareaTag = 9,\n  StartSelfClosingTag = 10,\n  StartCloseTag = 11,\n  NoMatchStartCloseTag = 12,\n  MismatchedStartCloseTag = 13,\n  missingCloseTag = 57,\n  IncompleteCloseTag = 14,\n  commentContent$1 = 58,\n  Element = 20,\n  TagName = 22,\n  Attribute = 23,\n  AttributeName = 24,\n  AttributeValue = 26,\n  UnquotedAttributeValue = 27,\n  ScriptText = 28,\n  StyleText = 31,\n  TextareaText = 34,\n  OpenTag = 36,\n  CloseTag = 37,\n  Dialect_noMatch = 0,\n  Dialect_selfClosing = 1;\n\n/* Hand-written tokenizers for HTML. */\n\nconst selfClosers = {\n  area: true, base: true, br: true, col: true, command: true,\n  embed: true, frame: true, hr: true, img: true, input: true,\n  keygen: true, link: true, meta: true, param: true, source: true,\n  track: true, wbr: true, menuitem: true\n};\n\nconst implicitlyClosed = {\n  dd: true, li: true, optgroup: true, option: true, p: true,\n  rp: true, rt: true, tbody: true, td: true, tfoot: true,\n  th: true, tr: true\n};\n\nconst closeOnOpen = {\n  dd: {dd: true, dt: true},\n  dt: {dd: true, dt: true},\n  li: {li: true},\n  option: {option: true, optgroup: true},\n  optgroup: {optgroup: true},\n  p: {\n    address: true, article: true, aside: true, blockquote: true, dir: true,\n    div: true, dl: true, fieldset: true, footer: true, form: true,\n    h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,\n    header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,\n    p: true, pre: true, section: true, table: true, ul: true\n  },\n  rp: {rp: true, rt: true},\n  rt: {rp: true, rt: true},\n  tbody: {tbody: true, tfoot: true},\n  td: {td: true, th: true},\n  tfoot: {tbody: true},\n  th: {td: true, th: true},\n  thead: {tbody: true, tfoot: true},\n  tr: {tr: true}\n};\n\nfunction nameChar(ch) {\n  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161\n}\n\nfunction isSpace(ch) {\n  return ch == 9 || ch == 10 || ch == 13 || ch == 32\n}\n\nlet cachedName = null, cachedInput = null, cachedPos = 0;\nfunction tagNameAfter(input, offset) {\n  let pos = input.pos + offset;\n  if (cachedPos == pos && cachedInput == input) return cachedName\n  let next = input.peek(offset);\n  while (isSpace(next)) next = input.peek(++offset);\n  let name = \"\";\n  for (;;) {\n    if (!nameChar(next)) break\n    name += String.fromCharCode(next);\n    next = input.peek(++offset);\n  }\n  // Undefined to signal there's a <? or <!, null for just missing\n  cachedInput = input; cachedPos = pos;\n  return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null\n}\n\nconst lessThan = 60, greaterThan = 62, slash = 47, question = 63, bang = 33, dash = 45;\n\nfunction ElementContext(name, parent) {\n  this.name = name;\n  this.parent = parent;\n}\n\nconst startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];\n\nconst elementContext = new ContextTracker({\n  start: null,\n  shift(context, term, stack, input) {\n    return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  reduce(context, term) {\n    return term == Element && context ? context.parent : context\n  },\n  reuse(context, node, stack, input) {\n    let type = node.type.id;\n    return type == StartTag || type == OpenTag\n      ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  strict: false\n});\n\nconst tagStart = new ExternalTokenizer((input, stack) => {\n  if (input.next != lessThan) {\n    // End of file, close any open tags\n    if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);\n    return\n  }\n  input.advance();\n  let close = input.next == slash;\n  if (close) input.advance();\n  let name = tagNameAfter(input, 0);\n  if (name === undefined) return\n  if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)\n\n  let parent = stack.context ? stack.context.name : null;\n  if (close) {\n    if (name == parent) return input.acceptToken(StartCloseTag)\n    if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)\n    if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)\n    for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return\n    input.acceptToken(MismatchedStartCloseTag);\n  } else {\n    if (name == \"script\") return input.acceptToken(StartScriptTag)\n    if (name == \"style\") return input.acceptToken(StartStyleTag)\n    if (name == \"textarea\") return input.acceptToken(StartTextareaTag)\n    if (selfClosers.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)\n    if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);\n    else input.acceptToken(StartTag);\n  }\n}, {contextual: true});\n\nconst commentContent = new ExternalTokenizer(input => {\n  for (let dashes = 0, i = 0;; i++) {\n    if (input.next < 0) {\n      if (i) input.acceptToken(commentContent$1);\n      break\n    }\n    if (input.next == dash) {\n      dashes++;\n    } else if (input.next == greaterThan && dashes >= 2) {\n      if (i >= 3) input.acceptToken(commentContent$1, -2);\n      break\n    } else {\n      dashes = 0;\n    }\n    input.advance();\n  }\n});\n\nfunction inForeignElement(context) {\n  for (; context; context = context.parent)\n    if (context.name == \"svg\" || context.name == \"math\") return true\n  return false\n}\n\nconst endTag = new ExternalTokenizer((input, stack) => {\n  if (input.next == slash && input.peek(1) == greaterThan) {\n    let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);\n    input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);\n  } else if (input.next == greaterThan) {\n    input.acceptToken(EndTag, 1);\n  }\n});\n\nfunction contentTokenizer(tag, textToken, endToken) {\n  let lastState = 2 + tag.length;\n  return new ExternalTokenizer(input => {\n    // state means:\n    // - 0 nothing matched\n    // - 1 '<' matched\n    // - 2 '</' + possibly whitespace matched\n    // - 3-(1+tag.length) part of the tag matched\n    // - lastState whole tag + possibly whitespace matched\n    for (let state = 0, matchedLen = 0, i = 0;; i++) {\n      if (input.next < 0) {\n        if (i) input.acceptToken(textToken);\n        break\n      }\n      if (state == 0 && input.next == lessThan ||\n          state == 1 && input.next == slash ||\n          state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {\n        state++;\n        matchedLen++;\n      } else if ((state == 2 || state == lastState) && isSpace(input.next)) {\n        matchedLen++;\n      } else if (state == lastState && input.next == greaterThan) {\n        if (i > matchedLen)\n          input.acceptToken(textToken, -matchedLen);\n        else\n          input.acceptToken(endToken, -(matchedLen - 2));\n        break\n      } else if ((input.next == 10 /* '\\n' */ || input.next == 13 /* '\\r' */) && i) {\n        input.acceptToken(textToken, 1);\n        break\n      } else {\n        state = matchedLen = 0;\n      }\n      input.advance();\n    }\n  })\n}\n\nconst scriptTokens = contentTokenizer(\"script\", scriptText, StartCloseScriptTag);\n\nconst styleTokens = contentTokenizer(\"style\", styleText, StartCloseStyleTag);\n\nconst textareaTokens = contentTokenizer(\"textarea\", textareaText, StartCloseTextareaTag);\n\nconst htmlHighlighting = styleTags({\n  \"Text RawText\": tags.content,\n  \"StartTag StartCloseTag SelfClosingEndTag EndTag\": tags.angleBracket,\n  TagName: tags.tagName,\n  \"MismatchedCloseTag/TagName\": [tags.tagName,  tags.invalid],\n  AttributeName: tags.attributeName,\n  \"AttributeValue UnquotedAttributeValue\": tags.attributeValue,\n  Is: tags.definitionOperator,\n  \"EntityReference CharacterReference\": tags.character,\n  Comment: tags.blockComment,\n  ProcessingInst: tags.processingInstruction,\n  DoctypeDecl: tags.documentMeta\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z\",\n  stateData: \",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~\",\n  goto: \"%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp\",\n  nodeNames: \"⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl\",\n  maxTerm: 67,\n  context: elementContext,\n  nodeProps: [\n    [\"closedBy\", -10,1,2,3,7,8,9,10,11,12,13,\"EndTag\",6,\"EndTag SelfClosingEndTag\",-4,21,30,33,36,\"CloseTag\"],\n    [\"openedBy\", 4,\"StartTag StartCloseTag\",5,\"StartTag\",-4,29,32,35,37,\"OpenTag\"],\n    [\"group\", -9,14,17,18,19,20,39,40,41,42,\"Entity\",16,\"Entity TextContent\",-3,28,31,34,\"TextContent Entity\"],\n    [\"isolate\", -11,21,29,30,32,33,35,36,37,38,41,42,\"ltr\",-3,26,27,39,\"\"]\n  ],\n  propSources: [htmlHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 9,\n  tokenData: \"!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X\",\n  tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],\n  topRules: {\"Document\":[0,15]},\n  dialects: {noMatch: 0, selfClosing: 509},\n  tokenPrec: 511\n});\n\nfunction getAttrs(openTag, input) {\n  let attrs = Object.create(null);\n  for (let att of openTag.getChildren(Attribute)) {\n    let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);\n    if (name) attrs[input.read(name.from, name.to)] =\n      !value ? \"\" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);\n  }\n  return attrs\n}\n\nfunction findTagName(openTag, input) {\n  let tagNameNode = openTag.getChild(TagName);\n  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : \" \"\n}\n\nfunction maybeNest(node, input, tags) {\n  let attrs;\n  for (let tag of tags) {\n    if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))\n      return {parser: tag.parser}\n  }\n  return null\n}\n\n// tags?: {\n//   tag: string,\n//   attrs?: ({[attr: string]: string}) => boolean,\n//   parser: Parser\n// }[]\n// attributes?: {\n//   name: string,\n//   tagName?: string,\n//   parser: Parser\n// }[]\n \nfunction configureNesting(tags = [], attributes = []) {\n  let script = [], style = [], textarea = [], other = [];\n  for (let tag of tags) {\n    let array = tag.tag == \"script\" ? script : tag.tag == \"style\" ? style : tag.tag == \"textarea\" ? textarea : other;\n    array.push(tag);\n  }\n  let attrs = attributes.length ? Object.create(null) : null;\n  for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);\n\n  return parseMixed((node, input) => {\n    let id = node.type.id;\n    if (id == ScriptText) return maybeNest(node, input, script)\n    if (id == StyleText) return maybeNest(node, input, style)\n    if (id == TextareaText) return maybeNest(node, input, textarea)\n\n    if (id == Element && other.length) {\n      let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;\n      if (tagName) for (let tag of other) {\n        if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(open, input))))) {\n          let close = n.lastChild;\n          let to = close.type.id == CloseTag ? close.from : n.to;\n          if (to > open.to)\n            return {parser: tag.parser, overlay: [{from: open.to, to}]}\n        }\n      }\n    }\n\n    if (attrs && id == Attribute) {\n      let n = node.node, nameNode;\n      if (nameNode = n.firstChild) {\n        let matches = attrs[input.read(nameNode.from, nameNode.to)];\n        if (matches) for (let attr of matches) {\n          if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue\n          let value = n.lastChild;\n          if (value.type.id == AttributeValue) {\n            let from = value.from + 1;\n            let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);\n            if (to > from) return {parser: attr.parser, overlay: [{from, to}]}\n          } else if (value.type.id == UnquotedAttributeValue) {\n            return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}\n          }\n        }\n      }\n    }\n    return null\n  })\n}\n\nexport { configureNesting, parser };\n","import { ContextTracker, ExternalTokenizer, LRParser, LocalTokenGroup } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst noSemi = 312,\n  incdec = 1,\n  incdecPrefix = 2,\n  questionDot = 3,\n  JSXStartTag = 4,\n  insertSemi = 313,\n  spaces = 315,\n  newline = 316,\n  LineComment = 5,\n  BlockComment = 6,\n  Dialect_jsx = 0;\n\n/* Hand-written tokenizers for JavaScript tokens that can't be\n   expressed by lezer's built-in tokenizer. */\n\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,\n               8201, 8202, 8232, 8233, 8239, 8287, 12288];\n\nconst braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, lt = 60, comma = 44,\n      question = 63, dot = 46;\n\nconst trackNewline = new ContextTracker({\n  start: false,\n  shift(context, term) {\n    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline\n  },\n  strict: false\n});\n\nconst insertSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == braceR || next == -1 || stack.context)\n    input.acceptToken(insertSemi);\n}, {contextual: true, fallback: true});\n\nconst noSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input, after;\n  if (space.indexOf(next) > -1) return\n  if (next == slash && ((after = input.peek(1)) == slash || after == star)) return\n  if (next != braceR && next != semicolon && next != -1 && !stack.context)\n    input.acceptToken(noSemi);\n}, {contextual: true});\n\nconst operatorToken = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == plus || next == minus) {\n    input.advance();\n    if (next == input.next) {\n      input.advance();\n      let mayPostfix = !stack.context && stack.canShift(incdec);\n      input.acceptToken(mayPostfix ? incdec : incdecPrefix);\n    }\n  } else if (next == question && input.peek(1) == dot) {\n    input.advance(); input.advance();\n    if (input.next < 48 || input.next > 57) // No digit after\n      input.acceptToken(questionDot);\n  }\n}, {contextual: true});\n\nfunction identifierChar(ch, start) {\n  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||\n    !start && ch >= 48 && ch <= 57\n}\n\nconst jsx = new ExternalTokenizer((input, stack) => {\n  if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return\n  input.advance();\n  if (input.next == slash) return\n  // Scan for an identifier followed by a comma or 'extends', don't\n  // treat this as a start tag if present.\n  let back = 0;\n  while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n  if (identifierChar(input.next, true)) {\n    input.advance();\n    back++;\n    while (identifierChar(input.next, false)) { input.advance(); back++; }\n    while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n    if (input.next == comma) return\n    for (let i = 0;; i++) {\n      if (i == 7) {\n        if (!identifierChar(input.next, true)) return\n        break\n      }\n      if (input.next != \"extends\".charCodeAt(i)) break\n      input.advance();\n      back++;\n    }\n  }\n  input.acceptToken(JSXStartTag, -back);\n});\n\nconst jsHighlight = styleTags({\n  \"get set async static\": tags.modifier,\n  \"for while do if else switch try catch finally return throw break continue default case\": tags.controlKeyword,\n  \"in of await yield void typeof delete instanceof\": tags.operatorKeyword,\n  \"let var const using function class extends\": tags.definitionKeyword,\n  \"import export from\": tags.moduleKeyword,\n  \"with debugger as new\": tags.keyword,\n  TemplateString: tags.special(tags.string),\n  super: tags.atom,\n  BooleanLiteral: tags.bool,\n  this: tags.self,\n  null: tags.null,\n  Star: tags.modifier,\n  VariableName: tags.variableName,\n  \"CallExpression/VariableName TaggedTemplateExpression/VariableName\": tags.function(tags.variableName),\n  VariableDefinition: tags.definition(tags.variableName),\n  Label: tags.labelName,\n  PropertyName: tags.propertyName,\n  PrivatePropertyName: tags.special(tags.propertyName),\n  \"CallExpression/MemberExpression/PropertyName\": tags.function(tags.propertyName),\n  \"FunctionDeclaration/VariableDefinition\": tags.function(tags.definition(tags.variableName)),\n  \"ClassDeclaration/VariableDefinition\": tags.definition(tags.className),\n  PropertyDefinition: tags.definition(tags.propertyName),\n  PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),\n  UpdateOp: tags.updateOperator,\n  \"LineComment Hashbang\": tags.lineComment,\n  BlockComment: tags.blockComment,\n  Number: tags.number,\n  String: tags.string,\n  Escape: tags.escape,\n  ArithOp: tags.arithmeticOperator,\n  LogicOp: tags.logicOperator,\n  BitOp: tags.bitwiseOperator,\n  CompareOp: tags.compareOperator,\n  RegExp: tags.regexp,\n  Equals: tags.definitionOperator,\n  Arrow: tags.function(tags.punctuation),\n  \": Spread\": tags.punctuation,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace,\n  \"InterpolationStart InterpolationEnd\": tags.special(tags.brace),\n  \".\": tags.derefOperator,\n  \", ;\": tags.separator,\n  \"@\": tags.meta,\n\n  TypeName: tags.typeName,\n  TypeDefinition: tags.definition(tags.typeName),\n  \"type enum interface implements namespace module declare\": tags.definitionKeyword,\n  \"abstract global Privacy readonly override\": tags.modifier,\n  \"is keyof unique infer\": tags.operatorKeyword,\n\n  JSXAttributeValue: tags.attributeValue,\n  JSXText: tags.content,\n  \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": tags.angleBracket,\n  \"JSXIdentifier JSXNameSpacedName\": tags.tagName,\n  \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": tags.attributeName,\n  \"JSXBuiltin/JSXIdentifier\": tags.standard(tags.tagName)\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_identifier = {__proto__:null,export:20, as:25, from:33, default:36, async:41, function:42, extends:54, this:58, true:66, false:66, null:78, void:82, typeof:86, super:102, new:136, delete:148, yield:157, await:161, class:166, public:229, private:229, protected:229, readonly:231, instanceof:250, satisfies:253, in:254, const:256, import:290, keyof:345, unique:349, infer:355, is:391, abstract:411, implements:413, type:415, let:418, var:420, using:423, interface:429, enum:433, namespace:439, module:441, declare:445, global:449, for:468, of:477, while:480, with:484, do:488, if:492, else:494, switch:498, case:504, try:510, catch:514, finally:518, return:522, throw:526, break:530, continue:534, debugger:538};\nconst spec_word = {__proto__:null,async:123, get:125, set:127, declare:189, public:191, private:191, protected:191, static:193, abstract:195, override:197, readonly:203, accessor:205, new:395};\nconst spec_LessThan = {__proto__:null,\"<\":187};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"$=dO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#CiO+RO!bO'#CjO+aO#tO'#CjO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DwO0fQ^O'#EPOOQ?Mr'#EX'#EXO1PQWO'#EUOOQO'#Em'#EmOOQO'#Ih'#IhO1XQWO'#GpO1dQWO'#ElO1iQWO'#ElO3hQ?NdO'#JmO6[Q?NdO'#JnO6uQWO'#F[O6zQ&jO'#FsOOQ?Mr'#Fe'#FeO7VO,YO'#FeO7eQ7[O'#FzO9RQWO'#FyOOQ?Mr'#Jn'#JnOOQ?Mp'#Jm'#JmO9WQWO'#GtOOQU'#KZ'#KZO9cQWO'#IUO9hQ?MxO'#IVOOQU'#JZ'#JZOOQU'#IZ'#IZQ`Q^OOO`Q^OOO9pQMnO'#DsO9wQ^O'#D{O:OQ^O'#D}O9^QWO'#GpO:VQ7[O'#CoO:eQWO'#EkO:pQWO'#EvO:uQ7[O'#FdO;dQWO'#GpOOQO'#K['#K[O;iQWO'#K[O;wQWO'#GxO;wQWO'#GyO;wQWO'#G{O9^QWO'#HOO<nQWO'#HRO>VQWO'#CeO>gQWO'#H_O>oQWO'#HeO>oQWO'#HgO`Q^O'#HiO>oQWO'#HkO>oQWO'#HnO>tQWO'#HtO>yQ?MyO'#HzO%[Q^O'#H|O?UQ?MyO'#IOO?aQ?MyO'#IQO9hQ?MxO'#ISO?lQ?NdO'#CiO@nQ`O'#DiQOQWOOO%[Q^O'#D}OAUQWO'#EQO:VQ7[O'#EkOAaQWO'#EkOAlQpO'#FdOOQU'#Cg'#CgOOQ?Mp'#Dn'#DnOOQ?Mp'#Jq'#JqO%[Q^O'#JqOOQO'#Jt'#JtOOQO'#Id'#IdOBlQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Jx'#JxOChQ?NQO'#EdOCrQ`O'#ETOOQO'#Js'#JsODWQ`O'#JtOEeQ`O'#ETOCrQ`O'#EdPErO#@ItO'#CbPOOO)CDx)CDxOOOO'#I['#I[OE}O!bO,59UOOQ?Mr,59U,59UOOOO'#I]'#I]OF]O#tO,59UO%[Q^O'#D`OOOO'#I_'#I_OFkO!0LbO,59xOOQ?Mr,59x,59xOFyQ^O'#I`OG^QWO'#JoOI]QrO'#JoO+}Q^O'#JoOIdQWO,5:OOIzQWO'#EmOJXQWO'#KOOJdQWO'#J}OJdQWO'#J}OJlQWO,5;ZOJqQWO'#J|OOQ?Mv,5:Z,5:ZOJxQ^O,5:ZOLvQ?NdO,5:cOMgQWO,5:kONQQ?MxO'#J{ONXQWO'#JzO9WQWO'#JzONmQWO'#JzONuQWO,5;YONzQWO'#JzO!#PQrO'#JnOOQ?Mr'#Ci'#CiO%[Q^O'#EPO!#oQrO,5:pOOQQ'#Ju'#JuOOQO-E<f-E<fO9^QWO,5=[O!$VQWO,5=[O!$[Q^O,5;WO!&_Q7[O'#EhO!'xQWO,5;WO!'}Q^O'#DvO!(XQ`O,5;aO!(aQ`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!(oQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yOOQ?Mr,5;{,5;{O%[Q^O'#IlO!*rQ?MxO,5<gO!&_Q7[O,5;bO!+aQ7[O,5;bO!-RQ7[O'#EZO%[Q^O,5;vOOQ?Mr,5;z,5;zO!-YQ&jO'#FiO!.VQ&jO'#KSO!-qQ&jO'#KSO!.^Q&jO'#KSOOQO'#KS'#KSO!.rQ&jO,5<ROOOS,5<_,5<_O!/TQ^O'#FuOOOS'#Ik'#IkO7VO,YO,5<PO!/[Q&jO'#FwOOQ?Mr,5<P,5<PO!/{Q!LQO'#CvOOQ?Mr'#Cz'#CzO!0`QWO'#CzO!0eO!0LbO'#DOO!1RQ7[O,5<dO!1YQWO,5<fO!2uQ$ISO'#GVO!3SQWO'#GWO!3XQWO'#GWO!4wQ$ISO'#G[O!5sQ`O'#G`OOQO'#Gk'#GkO!+hQ7[O'#GjOOQO'#Gm'#GmO!+hQ7[O'#GlO!6fQ!LQO'#JgOOQ?Mr'#Jg'#JgO!6pQWO'#JfO!7OQWO'#JeO!7WQWO'#CuOOQ?Mr'#Cx'#CxOOQ?Mr'#DS'#DSOOQ?Mr'#DU'#DUO1SQWO'#DWO!+hQ7[O'#F}O!+hQ7[O'#GPO!7`QWO'#GRO!7eQWO'#GSO!3XQWO'#GYO!+hQ7[O'#G_O!7jQWO'#EnO!8XQWO,5<eOOQ?Mp'#Cr'#CrO!8aQWO'#EoO!9ZQ`O'#EpOOQ?Mp'#J|'#J|O!9bQ?MxO'#K]O9hQ?MxO,5=`O`Q^O,5>pOOQU'#Jc'#JcOOQU,5>q,5>qOOQU-E<X-E<XO!;aQ?NdO,5:_O!9UQ`O,5:]O!=zQ?NdO,5:gO%[Q^O,5:gO!@bQ?NdO,5:iOOQO,5@v,5@vO!ARQ7[O,5=[O!AaQ?MxO'#JdO9RQWO'#JdO!ArQ?MxO,59ZO!A}Q`O,59ZO!BVQ7[O,59ZO:VQ7[O,59ZO!BbQWO,5;WO!BjQWO'#H^O!COQWO'#K`O%[Q^O,5;|O!9UQ`O,5<OO!CWQWO,5=wO!C]QWO,5=wO!CbQWO,5=wO9hQ?MxO,5=wO;wQWO,5=gOOQO'#Cv'#CvO!CpQ`O,5=dO!CxQ7[O,5=eO!DTQWO,5=gO!DYQpO,5=jO!DbQWO'#K[O>tQWO'#HTO9^QWO'#HVO!DgQWO'#HVO:VQ7[O'#HXO!DlQWO'#HXOOQU,5=m,5=mO!DqQWO'#HYO!ESQWO'#CoO!EXQWO,59PO!EcQWO,59PO!GhQ^O,59POOQU,59P,59PO!GxQ?MxO,59PO%[Q^O,59PO!JTQ^O'#HaOOQU'#Hb'#HbOOQU'#Hc'#HcO`Q^O,5=yO!JkQWO,5=yO`Q^O,5>PO`Q^O,5>RO!JpQWO,5>TO`Q^O,5>VO!JuQWO,5>YO!JzQ^O,5>`OOQU,5>f,5>fO%[Q^O,5>fO9hQ?MxO,5>hOOQU,5>j,5>jO# UQWO,5>jOOQU,5>l,5>lO# UQWO,5>lOOQU,5>n,5>nO# rQ`O'#D[O%[Q^O'#JqO# |Q`O'#JqO#!kQ`O'#DjO#!|Q`O'#DjO#%_Q^O'#DjO#%fQWO'#JpO#%nQWO,5:TO#%sQWO'#EqO#&RQWO'#KPO#&ZQWO,5;[O#&`Q`O'#DjO#&mQ`O'#ESOOQ?Mr,5:l,5:lO%[Q^O,5:lO#&tQWO,5:lO>tQWO,5;VO!A}Q`O,5;VO!BVQ7[O,5;VO:VQ7[O,5;VO#&|QWO,5@]O#'RQ(CYO,5:pOOQO-E<b-E<bO#(XQ?NQO,5;OOCrQ`O,5:oO#(cQ`O,5:oOCrQ`O,5;OO!ArQ?MxO,5:oOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#(pQ?MxO,5;OO#({Q?MxO,5;OO!A}Q`O,5:oOOQO,5;U,5;UO#)ZQ?MxO,5;OPOOO'#IY'#IYP#)oO#@ItO,58|POOO,58|,58|OOOO-E<Y-E<YOOQ?Mr1G.p1G.pOOOO-E<Z-E<ZO#)zQpO,59zOOOO-E<]-E<]OOQ?Mr1G/d1G/dO#*PQrO,5>zO+}Q^O,5>zOOQO,5?Q,5?QO#*ZQ^O'#I`OOQO-E<^-E<^O#*hQWO,5@ZO#*pQrO,5@ZO#*wQWO,5@iOOQ?Mr1G/j1G/jO%[Q^O,5@jO#+PQWO'#IfOOQO-E<d-E<dO#*wQWO,5@iOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0V1G0VO%[Q^O,5@gO#+eQ?MxO,5@gO#+vQ?MxO,5@gO#+}QWO,5@fO9WQWO,5@fO#,VQWO,5@fO#,eQWO'#IiO#+}QWO,5@fOOQ?Mp1G0t1G0tO!(XQ`O,5:rO!(dQ`O,5:rOOQQ,5:t,5:tO#-VQYO,5:tO#-_Q7[O1G2vO9^QWO1G2vOOQ?Mr1G0r1G0rO#-mQ?NdO1G0rO#.rQ?NbO,5;SOOQ?Mr'#GU'#GUO#/`Q?NdO'#JgO!$[Q^O1G0rO#1hQrO'#JrO%[Q^O'#JrO#1rQWO,5:bOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#1wQWO1G0{O#4]Q?NdO1G0|O#4dQ?NdO1G0|O#6zQ?NdO1G0|O#7RQ?NdO1G0|O#9YQ?NdO1G0|O#9pQ?NdO1G0|O#<gQ?NdO1G0|O#<nQ?NdO1G0|O#?OQ?NdO1G0|O#?]Q?NdO1G0|O#AWQ?NdO1G0|O#DWQ07bO'#CiO#FRQ07bO1G1_O#FYQ07bO'#JnO#FmQ?NdO,5?WOOQ?Mp-E<j-E<jO#GaQ?NdO1G0|OOQ?Mr1G0|1G0|O#IiQ7[O'#JwO#IsQWO,5:uO#IxQ?NdO1G1bO#JlQ&jO,5<VO#JtQ&jO,5<WO#J|Q&jO'#FnO#KeQWO'#FmOOQO'#KT'#KTOOQO'#Ij'#IjO#KjQ&jO1G1mOOQ?Mr1G1m1G1mOOOS1G1x1G1xO#K{Q07bO'#JmO#LVQWO,5<aO!(oQ^O,5<aOOOS-E<i-E<iOOQ?Mr1G1k1G1kO#L[Q`O'#KSOOQ?Mr,5<c,5<cO#LdQ`O,5<cOOQ?Mr,59f,59fO!&_Q7[O'#DQOOOO'#I^'#I^O#LiO!0LbO,59jOOQ?Mr,59j,59jO%[Q^O1G2OO!7eQWO'#InO#LtQ7[O,5<xOOQ?Mr,5<u,5<uO!+hQ7[O'#IqO#MdQ7[O,5=UO!+hQ7[O'#IsO#NVQ7[O,5=WO!&_Q7[O,5=YOOQO1G2Q1G2QO#NaQpO'#CrO#NtQ$ISO'#EoO$ sQ`O'#G`O$!aQpO,5<qO$!hQWO'#KWO9WQWO'#KWO$!vQWO,5<sO!+hQ7[O,5<rO$!{QWO'#GXO$#^QWO,5<rO$#cQpO'#GUO$#pQpO'#KXO$#zQWO'#KXO!&_Q7[O'#KXO$$PQWO,5<vO$$UQ`O'#GaO!5nQ`O'#GaO$$gQWO'#GcO$$lQWO'#GeO!3XQWO'#GhO$$qQ?MxO'#IpO$$|Q`O,5<zOOQ?Mv,5<z,5<zO$%TQ`O'#GaO$%cQ`O'#GbO$%kQ`O'#GbO$%pQ7[O,5=UO$&QQ7[O,5=WOOQ?Mr,5=Z,5=ZO!+hQ7[O,5@QO!+hQ7[O,5@QO$&bQWO'#IuO$&mQWO,5@PO$&uQWO,59aO$'iQ!LSO,59rOOQ?Mr'#Jk'#JkO$([Q7[O,5<iO$(}Q7[O,5<kO@fQWO,5<mOOQ?Mr,5<n,5<nO$)XQWO,5<tO$)^Q7[O,5<yO$)nQWO'#JzO!$[Q^O1G2PO$)sQWO1G2PO9WQWO'#J}O9WQWO'#EqO%[Q^O'#EqO9WQWO'#IwO$)xQ?MxO,5@wOOQU1G2z1G2zOOQU1G4[1G4[OOQ?Mr1G/y1G/yOOQ?Mr1G/w1G/wO$+zQ?NdO1G0ROOQU1G2v1G2vO!&_Q7[O1G2vO%[Q^O1G2vO#-bQWO1G2vO$.OQ7[O'#EhOOQ?Mp,5@O,5@OO$.YQ?MxO,5@OOOQU1G.u1G.uO!ArQ?MxO1G.uO!A}Q`O1G.uO!BVQ7[O1G.uO$.kQWO1G0rO$.pQWO'#CiO$.{QWO'#KaO$/TQWO,5=xO$/YQWO'#KaO$/_QWO'#KaO$/mQWO'#I}O$/{QWO,5@zO$0TQrO1G1hOOQ?Mr1G1j1G1jO9^QWO1G3cO@fQWO1G3cO$0[QWO1G3cO$0aQWO1G3cOOQU1G3c1G3cO!DTQWO1G3RO!&_Q7[O1G3OO$0fQWO1G3OOOQU1G3P1G3PO!&_Q7[O1G3PO$0kQWO1G3PO$0sQ`O'#G}OOQU1G3R1G3RO!5nQ`O'#IyO!DYQpO1G3UOOQU1G3U1G3UOOQU,5=o,5=oO$0{Q7[O,5=qO9^QWO,5=qO$$lQWO,5=sO9RQWO,5=sO!A}Q`O,5=sO!BVQ7[O,5=sO:VQ7[O,5=sO$1ZQWO'#K_O$1fQWO,5=tOOQU1G.k1G.kO$1kQ?MxO1G.kO@fQWO1G.kO$1vQWO1G.kO9hQ?MxO1G.kO$4OQrO,5@|O$4]QWO,5@|O9WQWO,5@|O$4hQ^O,5={O$4oQWO,5={OOQU1G3e1G3eO`Q^O1G3eOOQU1G3k1G3kOOQU1G3m1G3mO>oQWO1G3oO$4tQ^O1G3qO$8xQ^O'#HpOOQU1G3t1G3tO$9VQWO'#HvO>tQWO'#HxOOQU1G3z1G3zO$9_Q^O1G3zO9hQ?MxO1G4QOOQU1G4S1G4SOOQ?Mp'#G]'#G]O9hQ?MxO1G4UO9hQ?MxO1G4WO$=fQWO,5@]O!(oQ^O,5;]O9WQWO,5;]O>tQWO,5:UO!(oQ^O,5:UO!A}Q`O,5:UO$=kQ07bO,5:UOOQO,5;],5;]O$=uQ`O'#IaO$>]QWO,5@[OOQ?Mr1G/o1G/oO$>eQ`O'#IgO$>oQWO,5@kOOQ?Mp1G0v1G0vO#!|Q`O,5:UOOQO'#Ic'#IcO$>wQ`O,5:nOOQ?Mv,5:n,5:nO#&wQWO1G0WOOQ?Mr1G0W1G0WO%[Q^O1G0WOOQ?Mr1G0q1G0qO>tQWO1G0qO!A}Q`O1G0qO!BVQ7[O1G0qOOQ?Mp1G5w1G5wO!ArQ?MxO1G0ZOOQO1G0j1G0jO%[Q^O1G0jO$?OQ?MxO1G0jO$?ZQ?MxO1G0jO!A}Q`O1G0ZOCrQ`O1G0ZO$?iQ?MxO1G0jOOQO1G0Z1G0ZO$?}Q?NdO1G0jPOOO-E<W-E<WPOOO1G.h1G.hOOOO1G/f1G/fO$@XQpO,5<gO$@aQrO1G4fOOQO1G4l1G4lO%[Q^O,5>zO$@kQWO1G5uO$@sQWO1G6TO$@{QrO1G6UO9WQWO,5?QO$AVQ?NdO1G6RO%[Q^O1G6RO$AgQ?MxO1G6RO$AxQWO1G6QO$AxQWO1G6QO9WQWO1G6QO$BQQWO,5?TO9WQWO,5?TOOQO,5?T,5?TO$BfQWO,5?TO$)nQWO,5?TOOQO-E<g-E<gOOQQ1G0^1G0^OOQQ1G0`1G0`O#-YQWO1G0`OOQU7+(b7+(bO!&_Q7[O7+(bO%[Q^O7+(bO$BtQWO7+(bO$CPQ7[O7+(bO$C_Q?NdO,5=UO$EgQ?NdO,5=WO$GoQ?NdO,5=UO$I}Q?NdO,5=WO$L]Q?NdO,59rO$NbQ?NdO,5<iO%!jQ?NdO,5<kO%$rQ?NdO,5<yOOQ?Mr7+&^7+&^O%'QQ?NdO7+&^O%'tQ^O'#IbO%(RQWO,5@^O%(ZQrO,5@^OOQ?Mr1G/|1G/|O%(eQWO7+&gOOQ?Mr7+&g7+&gO%(jQ07bO,5:cO%[Q^O7+&yO%(tQ07bO,5:_O%)RQ07bO,5:gO%)]Q07bO,5:iO%)gQ7[O'#IeO%)qQWO,5@cOOQ?Mr1G0a1G0aOOQO1G1q1G1qOOQO1G1r1G1rO%)yQtO,5<YO!(oQ^O,5<XOOQO-E<h-E<hOOQ?Mr7+'X7+'XOOOS7+'d7+'dOOOS1G1{1G1{O%*UQWO1G1{OOQ?Mr1G1}1G1}O%*ZQpO,59lOOOO-E<[-E<[OOQ?Mr1G/U1G/UO%*bQ?NdO7+'jOOQ?Mr,5?Y,5?YO%+UQpO,5?YOOQ?Mr1G2d1G2dP!&_Q7[O'#InPOQ?Mr-E<l-E<lO%+tQ7[O,5?]OOQ?Mr-E<o-E<oO%,gQ7[O,5?_OOQ?Mr-E<q-E<qO%,qQpO1G2tO%,xQpO'#CrO%-`Q7[O'#J}O%-gQ^O'#EqOOQ?Mr1G2]1G2]O%-qQWO'#ImO%.VQWO,5@rO%.VQWO,5@rO%._QWO,5@rO%.jQWO,5@rOOQO1G2_1G2_O%.xQ7[O1G2^O!+hQ7[O1G2^O%/YQ$ISO'#IoO%/gQWO,5@sO!&_Q7[O,5@sO%/oQpO,5@sOOQ?Mr1G2b1G2bOOQ?Mp,5<{,5<{OOQ?Mp,5<|,5<|O$)nQWO,5<|OCcQWO,5<|O!A}Q`O,5<{OOQO'#Gd'#GdO%/yQWO,5<}OOQ?Mp,5=P,5=PO$)nQWO,5=SOOQO,5?[,5?[OOQO-E<n-E<nOOQ?Mv1G2f1G2fO!5nQ`O,5<{O%0RQWO,5<|O$$gQWO,5<}O!5nQ`O,5<|O!+hQ7[O'#IqO%0uQ7[O1G2pO!+hQ7[O'#IsO%1hQ7[O1G2rO%1rQ7[O1G5lO%1|Q7[O1G5lOOQO,5?a,5?aOOQO-E<s-E<sOOQO1G.{1G.{O!9UQ`O,59tO%[Q^O,59tOOQ?Mr,5<h,5<hO%2ZQWO1G2XO!+hQ7[O1G2`O%2`Q?NdO7+'kOOQ?Mr7+'k7+'kO!$[Q^O7+'kO%3SQWO,5;]OOQ?Mp,5?c,5?cOOQ?Mp-E<u-E<uO%3XQpO'#KYO#&wQWO7+(bO4UQrO7+(bO$BwQWO7+(bO%3cQ?NbO'#CiO%3vQ?NbO,5=QO%4hQWO,5=QOOQ?Mp1G5j1G5jOOQU7+$a7+$aO!ArQ?MxO7+$aO!A}Q`O7+$aO!$[Q^O7+&^O%4mQWO'#I|O%5UQWO,5@{OOQO1G3d1G3dO9^QWO,5@{O%5UQWO,5@{O%5^QWO,5@{OOQO,5?i,5?iOOQO-E<{-E<{OOQ?Mr7+'S7+'SO%5cQWO7+(}O9hQ?MxO7+(}O9^QWO7+(}O@fQWO7+(}OOQU7+(m7+(mO%5hQ?NbO7+(jO!&_Q7[O7+(jO%5rQpO7+(kOOQU7+(k7+(kO!&_Q7[O7+(kO%5yQWO'#K^O%6UQWO,5=iOOQO,5?e,5?eOOQO-E<w-E<wOOQU7+(p7+(pO%7eQ`O'#HWOOQU1G3]1G3]O!&_Q7[O1G3]O%[Q^O1G3]O%7lQWO1G3]O%7wQ7[O1G3]O9hQ?MxO1G3_O$$lQWO1G3_O9RQWO1G3_O!A}Q`O1G3_O!BVQ7[O1G3_O%8VQWO'#I{O%8kQWO,5@yO%8sQ`O,5@yOOQ?Mp1G3`1G3`OOQU7+$V7+$VO@fQWO7+$VO9hQ?MxO7+$VO%9OQWO7+$VO%[Q^O1G6hO%[Q^O1G6iO%9TQ?MxO1G6hO%9_Q^O1G3gO%9fQWO1G3gO%9kQ^O1G3gOOQU7+)P7+)PO9hQ?MxO7+)ZO`Q^O7+)]OOQU'#Kd'#KdOOQU'#JO'#JOO%9rQ^O,5>[OOQU,5>[,5>[O%[Q^O'#HqO%:PQWO'#HsOOQU,5>b,5>bO9WQWO,5>bOOQU,5>d,5>dOOQU7+)f7+)fOOQU7+)l7+)lOOQU7+)p7+)pOOQU7+)r7+)rO%:UQ`O1G5wO%:jQ07bO1G0wO%:tQWO1G0wOOQO1G/p1G/pO%;PQ07bO1G/pO>tQWO1G/pO!(oQ^O'#DjOOQO,5>{,5>{OOQO-E<_-E<_OOQO,5?R,5?ROOQO-E<e-E<eO!A}Q`O1G/pOOQO-E<a-E<aOOQ?Mv1G0Y1G0YOOQ?Mr7+%r7+%rO#&wQWO7+%rOOQ?Mr7+&]7+&]O>tQWO7+&]O!A}Q`O7+&]OOQO7+%u7+%uO$?}Q?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%;ZQ?MxO7+&UO!ArQ?MxO7+%uO!A}Q`O7+%uO%;fQ?MxO7+&UO%;tQ?NdO7++mO%[Q^O7++mO%<UQWO7++lO%<UQWO7++lOOQO1G4o1G4oO9WQWO1G4oO%<^QWO1G4oOOQQ7+%z7+%zO#&wQWO<<K|O4UQrO<<K|O%<lQWO<<K|OOQU<<K|<<K|O!&_Q7[O<<K|O%[Q^O<<K|O%<tQWO<<K|O%=PQ?NdO,5?]O%?XQ?NdO,5?_O%AaQ?NdO1G2^O%CoQ?NdO1G2pO%EwQ?NdO1G2rO%HPQrO,5>|O%[Q^O,5>|OOQO-E<`-E<`O%HZQWO1G5xOOQ?Mr<<JR<<JRO%HcQ07bO1G0rO%JjQ07bO1G0|O%JqQ07bO1G0|O%LrQ07bO1G0|O%LyQ07bO1G0|O%NkQ07bO1G0|O& RQ07bO1G0|O&#cQ07bO1G0|O&#jQ07bO1G0|O&%eQ07bO1G0|O&%rQ07bO1G0|O&'mQ07bO1G0|O&(QQ?NdO<<JeO&)VQ07bO1G0|O&*xQ07bO'#JgO&,{Q07bO1G1bO&-YQ07bO1G0RO&-dQ7[O,5?POOQO-E<c-E<cO!(oQ^O'#FpOOQO'#KU'#KUOOQO1G1t1G1tO&-nQWO1G1sO&-sQ07bO,5?WOOOS7+'g7+'gOOOO1G/W1G/WOOQ?Mr1G4t1G4tO!+hQ7[O7+(`O&0TQrO'#CiO&0_QWO,5?XO9WQWO,5?XOOQO-E<k-E<kO&0mQWO1G6^O&0mQWO1G6^O&0uQWO1G6^O&1QQ7[O7+'xO&1bQpO,5?ZO&1lQWO,5?ZO!&_Q7[O,5?ZOOQO-E<m-E<mO&1qQpO1G6_O&1{QWO1G6_OOQ?Mp1G2h1G2hO$)nQWO1G2hOOQ?Mp1G2g1G2gO&2TQWO1G2iO!&_Q7[O1G2iOOQ?Mp1G2n1G2nO!A}Q`O1G2gOCcQWO1G2hO&2YQWO1G2iO&2bQWO1G2hO&3UQ7[O,5?]OOQ?Mr-E<p-E<pO&3wQ7[O,5?_OOQ?Mr-E<r-E<rO!+hQ7[O7++WOOQ?Mr1G/`1G/`O&4RQWO1G/`OOQ?Mr7+'s7+'sO&4WQ7[O7+'zO&4hQ?NdO<<KVOOQ?Mr<<KV<<KVO&5[QWO1G0wO!&_Q7[O'#IvO&5aQWO,5@tO&7cQrO<<K|O!&_Q7[O1G2lOOQU<<G{<<G{O!ArQ?MxO<<G{O&7jQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?h,5?hO&8^QWO,5?hO&8cQWO,5?hOOQO-E<z-E<zO&8qQWO1G6gO&8qQWO1G6gO9^QWO1G6gO@fQWO<<LiOOQU<<Li<<LiO&8yQWO<<LiO9hQ?MxO<<LiOOQU<<LU<<LUO%5hQ?NbO<<LUOOQU<<LV<<LVO%5rQpO<<LVO&9OQ`O'#IxO&9ZQWO,5@xO!(oQ^O,5@xOOQU1G3T1G3TO%-gQ^O'#JqOOQO'#Iz'#IzO9hQ?MxO'#IzO&9cQ`O,5=rOOQU,5=r,5=rO&9jQ`O'#EdO&:OQWO7+(wO&:TQWO7+(wOOQU7+(w7+(wO!&_Q7[O7+(wO%[Q^O7+(wO&:]QWO7+(wOOQU7+(y7+(yO9hQ?MxO7+(yO$$lQWO7+(yO9RQWO7+(yO!A}Q`O7+(yO&:hQWO,5?gOOQO-E<y-E<yOOQO'#HZ'#HZO&:sQWO1G6eO9hQ?MxO<<GqOOQU<<Gq<<GqO@fQWO<<GqO&:{QWO7+,SO&;QQWO7+,TO%[Q^O7+,SO%[Q^O7+,TOOQU7+)R7+)RO&;VQWO7+)RO&;[Q^O7+)RO&;cQWO7+)ROOQU<<Lu<<LuOOQU<<Lw<<LwOOQU-E<|-E<|OOQU1G3v1G3vO&;hQWO,5>]OOQU,5>_,5>_O&;mQWO1G3|O9WQWO7+&cO!(oQ^O7+&cOOQO7+%[7+%[O&;rQ07bO1G6UO>tQWO7+%[OOQ?Mr<<I^<<I^OOQ?Mr<<Iw<<IwO>tQWO<<IwOOQO<<Ip<<IpO$?}Q?NdO<<IpO%[Q^O<<IpOOQO<<Ia<<IaO!ArQ?MxO<<IaO&;|Q?MxO<<IpO&<XQ?NdO<= XO&<iQWO<= WOOQO7+*Z7+*ZO9WQWO7+*ZOOQUANAhANAhO&<qQrOANAhO!&_Q7[OANAhO#&wQWOANAhO4UQrOANAhO&<xQWOANAhO%[Q^OANAhO&=QQ?NdO7+'xO&?`Q?NdO,5?]O&AhQ?NdO,5?_O&CpQ?NdO7+'zO&FOQrO1G4hO&FYQ07bO7+&^O&HZQ07bO,5=UO&J_Q07bO,5=WO&JoQ07bO,5=UO&KPQ07bO,5=WO&KaQ07bO,59rO&MdQ07bO,5<iO' dQ07bO,5<kO'#dQ07bO,5<yO'%VQ07bO7+'jO'%dQ07bO7+'kO'%qQWO,5<[OOQO7+'_7+'_O'%vQ7[O<<KzOOQO1G4s1G4sO'%}QWO1G4sO'&YQWO1G4sO'&hQWO7++xO'&hQWO7++xO!&_Q7[O1G4uO'&pQpO1G4uO'&zQWO7++yOOQ?Mp7+(S7+(SO$)nQWO7+(TO''SQpO7+(TOOQ?Mp7+(R7+(RO$)nQWO7+(SO''ZQWO7+(TO!&_Q7[O7+(TOCcQWO7+(SO''`Q7[O<<NrOOQ?Mr7+$z7+$zO''jQpO,5?bOOQO-E<t-E<tO''tQ?NbO7+(WOOQUAN=gAN=gO9^QWO1G5SOOQO1G5S1G5SO'(UQWO1G5SO'(ZQWO7+,RO'(ZQWO7+,RO9hQ?MxOANBTO@fQWOANBTOOQUANBTANBTOOQUANApANApOOQUANAqANAqO'(cQWO,5?dOOQO-E<v-E<vO'(nQ07bO1G6dOOQO,5?f,5?fOOQO-E<x-E<xOOQU1G3^1G3^O%-gQ^O,5<}OOQU<<Lc<<LcO!&_Q7[O<<LcO&:OQWO<<LcO'(xQWO<<LcO%[Q^O<<LcOOQU<<Le<<LeO9hQ?MxO<<LeO$$lQWO<<LeO9RQWO<<LeO')QQ`O1G5RO')]QWO7+,POOQUAN=]AN=]O9hQ?MxOAN=]OOQU<= n<= nOOQU<= o<= oO')eQWO<= nO')jQWO<= oOOQU<<Lm<<LmO')oQWO<<LmO')tQ^O<<LmOOQU1G3w1G3wO>tQWO7+)hO'){QWO<<I}O'*WQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$?}Q?NdOAN?[OOQOAN>{AN>{O%[Q^OAN?[OOQO<<Mu<<MuOOQUG27SG27SO!&_Q7[OG27SO#&wQWOG27SO'*bQrOG27SO4UQrOG27SO'*iQWOG27SO'*qQ07bO<<JeO'+OQ07bO1G2^O',qQ07bO,5?]O'.qQ07bO,5?_O'0qQ07bO1G2pO'2qQ07bO1G2rO'4qQ07bO<<KVO'5OQ07bO<<IxOOQO1G1v1G1vO!+hQ7[OANAfOOQO7+*_7+*_O'5]QWO7+*_O'5hQWO<= dO'5pQpO7+*aOOQ?Mp<<Ko<<KoO$)nQWO<<KoOOQ?Mp<<Kn<<KnO'5zQpO<<KoO$)nQWO<<KnOOQO7+*n7+*nO9^QWO7+*nO'6RQWO<= mOOQUG27oG27oO9hQ?MxOG27oO!(oQ^O1G5OO'6ZQWO7+,OO&:OQWOANA}OOQUANA}ANA}O!&_Q7[OANA}O'6cQWOANA}OOQUANBPANBPO9hQ?MxOANBPO$$lQWOANBPOOQO'#H['#H[OOQO7+*m7+*mOOQUG22wG22wOOQUANEYANEYOOQUANEZANEZOOQUANBXANBXO'6kQWOANBXOOQU<<MS<<MSO!(oQ^OAN?iOOQOG24vG24vO$?}Q?NdOG24vO#&wQWOLD,nOOQULD,nLD,nO!&_Q7[OLD,nO'6pQrOLD,nO'6wQ07bO7+'xO'8jQ07bO,5?]O':jQ07bO,5?_O'<jQ07bO7+'zO'>]Q7[OG27QOOQO<<My<<MyOOQ?MpANAZANAZO$)nQWOANAZOOQ?MpANAYANAYOOQO<<NY<<NYOOQULD-ZLD-ZO'>mQ07bO7+*jOOQUG27iG27iO&:OQWOG27iO!&_Q7[OG27iOOQUG27kG27kO9hQ?MxOG27kOOQUG27sG27sO'>wQ07bOG25TOOQOLD*bLD*bOOQU!$(!Y!$(!YO#&wQWO!$(!YO!&_Q7[O!$(!YO'?RQ?NdOG27QOOQ?MpG26uG26uOOQULD-TLD-TO&:OQWOLD-TOOQULD-VLD-VOOQU!)9Et!)9EtO#&wQWO!)9EtOOQU!$(!o!$(!oOOQU!.K;`!.K;`O'AaQ07bOG27QO!(oQ^O'#DwO1PQWO'#EUO'CSQrO'#JmO'CZQMnO'#DsO'CbQ^O'#D{O'CiQrO'#CiO'FPQrO'#CiO!(oQ^O'#D}O'FaQ^O,5;WO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O,5;bO!(oQ^O'#IlO'HdQWO,5<gO'HlQ7[O,5;bO'JVQ7[O,5;bO!(oQ^O,5;vO!&_Q7[O'#GjO'HlQ7[O'#GjO!&_Q7[O'#GlO'HlQ7[O'#GlO1SQWO'#DWO1SQWO'#DWO!&_Q7[O'#F}O'HlQ7[O'#F}O!&_Q7[O'#GPO'HlQ7[O'#GPO!&_Q7[O'#G_O'HlQ7[O'#G_O!(oQ^O,5:gO'J^Q`O'#D[O!(oQ^O,5@jO'FaQ^O1G0rO'JhQ07bO'#CiO!(oQ^O1G2OO!&_Q7[O'#IqO'HlQ7[O'#IqO!&_Q7[O'#IsO'HlQ7[O'#IsO'JrQpO'#CrO!&_Q7[O,5<rO'HlQ7[O,5<rO'FaQ^O1G2PO!(oQ^O7+&yO!&_Q7[O1G2^O'HlQ7[O1G2^O!&_Q7[O'#IqO'HlQ7[O'#IqO!&_Q7[O'#IsO'HlQ7[O'#IsO!&_Q7[O1G2`O'HlQ7[O1G2`O'FaQ^O7+'kO'FaQ^O7+&^O!&_Q7[OANAfO'HlQ7[OANAfO'KVQWO'#ElO'K[QWO'#ElO'KdQWO'#F[O'KiQWO'#EvO'KnQWO'#KOO'KyQWO'#J|O'LUQWO,5;WO'LZQ7[O,5<dO'LbQWO'#GWO'LgQWO'#GWO'LlQWO,5<eO'LtQWO,5;WO'L|Q07bO1G1_O'MTQWO,5<rO'MYQWO,5<rO'M_QWO,5<tO'MdQWO,5<tO'MiQWO1G2PO'MnQWO1G0rO'MsQ7[O<<KzO'MzQ7[O<<KzO7eQ7[O'#FzO9RQWO'#FyOAaQWO'#EkO!(oQ^O,5;sO!3XQWO'#GWO!3XQWO'#GWO!3XQWO'#GYO!3XQWO'#GYO!+hQ7[O7+(`O!+hQ7[O7+(`O%,qQpO1G2tO%,qQpO1G2tO!&_Q7[O,5=YO!&_Q7[O,5=Y\",\n  stateData: \"( O~O'wOS'xOSTOS'yRQ~OPYOQYOSfOY!VOaqOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!rwO!uxO!y]O#t!PO$V|O%e}O%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO&S!WO&Y!XO&[!YO&^!ZO&`![O&c!]O&i!^O&o!_O&q!`O&s!aO&u!bO&w!cO(OSO(QTO(TUO([VO(j[O(yiO~OWtO~P`OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa!wOp!nO!P!oO!_!yO!`!vO!a!vO!y:lO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O'y!{O~OP]XR]X[]Xa]Xo]X}]X!P]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X'u]X([]X(m]X(t]X(u]X~O!d%PX~P(qO_!}O(Q#PO(R!}O(S#PO~O_#QO(S#PO(T#PO(U#QO~Ou#SO!R#TO(]#TO(^#VO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O:pO(QTO(TUO([VO(j[O(yiO~O!X#ZO!Y#WO!V(cP!V(qP~P+}O!Z#cO~P`OPYOQYOSfOd!jOe!iOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(QTO(TUO([VO(j[O(yiO~Om#mO!X#iO!y]O#f#lO#g#iO(O:qO!h(nP~P.iO!i#oO(O#nO~O!u#sO!y]O%e#tO~O#h#uO~O!d#vO#h#uO~OP$]OR#zO[$cOo$QO}#yO!P#{O!Y$`O!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO#w$VO#y$XO#z$YO([VO(m$ZO(t#|O(u#}O~Oa(aX'u(aX's(aX!h(aX!V(aX![(aX%f(aX!d(aX~P1qO#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX![(bX%f(bX~Oa(bX'u(bX's(bX!V(bX!h(bXs(bX!d(bX~P4UO#]$eO~O$[$hO$^$gO$e$mO~OSfO![$nO$h$oO$j$qO~Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{%[O!P$|O![$}O!f%aO!i$yO#g%bO$V%_O$r%]O$t%^O$w%`O(O$sO(QTO(TUO([$vO(t%OO(u%QOg(XP~O!i%cO~O!P%fO![%gO(O%eO~O!d%kO~Oa%lO'u%lO~O}%pO~P%[O(P!lO~P%[O%k%tO~P%[Oh%WO!i%cO(O%eO(P!lO~Oe%{O!i%cO(O%eO~O#s$SO~O}&QO![%}O!i&PO%g&TO(O%eO(P!lO(QTO(TUO`)SP~O!u#sO~O%p&VO!P)OX![)OX(O)OX~O(O&WO~O!r&]O#t!PO%g!QO%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO~Od&bOe&aO!u&_O%e&`O%x&^O~P;|Od&eOeyO![&dO!r&]O!uxO!y]O#t!PO%e}O%i!OO%j!OO%k!OO%n!RO%p!SO%s!TO%t!TO%v!UO~Ob&hO#]&kO%g&fO(P!lO~P=RO!i&lO!r&pO~O!i#oO~O![XO~Oa%lO't&xO'u%lO~Oa%lO't&{O'u%lO~Oa%lO't&}O'u%lO~O's]X!V]Xs]X!h]X&W]X![]X%f]X!d]X~P(qO!_'[O!`'TO!a'TO(P!lO(QTO(TUO~Op'RO!P'QO!X'UO(`'PO!Z(dP!Z(sP~P@YOk'_O![']O(O%eO~Oe'dO!i%cO(O%eO~O}&QO!i&PO~Op!nO!P!oO!y:lO#Q!pO#R!pO#T!pO#U!pO(P!lO(QTO(TUO(`!mO(j!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAtOa%lOh%WO!d#vO!i%cO'u%lO(m'mO~O!m'qO#]'oO~PCSOp!nO!P!oO(QTO(TUO(`!mO(j!sO~O![XOp(hX!P(hX!_(hX!`(hX!a(hX!y(hX#Q(hX#R(hX#S(hX#T(hX#U(hX#X(hX#Y(hX(P(hX(Q(hX(T(hX(`(hX(j(hX~O!`'iO!a'iO(P!lO~PCrO'z'uO'{'uO'|'wO~O_!}O(Q'yO(R!}O(S'yO~O_#QO(S'yO(T'yO(U#QO~Ou#SO!R#TO(]#TO(^'}O~O!X(PO!V'SX!V'YX!Y'SX!Y'YX~P+}O!Y(RO!V(cX~OP$]OR#zO[$cOo$QO}#yO!P#{O!Y(RO!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO#w$VO#y$XO#z$YO([VO(m$ZO(t#|O(u#}O~O!V(cX~PGfO!V(WO~O!V(pX!Y(pX!d(pX!h(pX(m(pX~O#](pX#h#aX!Z(pX~PIiO#](XO!V(rX!Y(rX~O!Y(YO!V(qX~O!V(]O~O#]$eO~PIiO!Z(^O~P`OR#zO}#yO!P#{O!i#xO([VOP!ka[!kao!ka!Y!ka!m!ka#O!ka#k!ka#l!ka#m!ka#n!ka#o!ka#p!ka#q!ka#r!ka#s!ka#u!ka#w!ka#y!ka#z!ka(m!ka(t!ka(u!ka~Oa!ka'u!ka's!ka!V!ka!h!kas!ka![!ka%f!ka!d!ka~PKPO!h(_O~O!d#vO#](`O(m'mO!Y(oXa(oX'u(oX~O!h(oX~PMlO!P%fO![%gO!y]O#f(eO#g(dO(O%eO~O!Y(fO!h(nX~O!h(hO~O!P%fO![%gO#g(dO(O%eO~OP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#s(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O!d#vO!h(bX~P! YOR(jO}(iO!i#xO#P$dO!y!xa!P!xa~O!u!xa%e!xa![!xa#f!xa#g!xa(O!xa~P!#ZO!u(nO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![XO!fuO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{;YO!P$|O![$}O!f<jO!i$yO#g;`O$V%_O$r;[O$t;^O$w%`O(O(rO(QTO(TUO([$vO(t%OO(u%QO~O#h(tO~O!X(vO!h(fP~P%[O(`(xO(j[O~O!P(zO!i#xO(`(xO(j[O~OP:kOQ:kOSfOd<fOe!iOmkOo:kOpkOqkOwkOy:kO{:kO!PWO!TkO!UkO![!eO!f:nO!iZO!l:kO!m:kO!n:kO!p:oO!r:rO!u!hO$V!kO(O)YO(QTO(TUO([VO(j[O(y<dO~O!Y$`Oa$oa'u$oa's$oa!h$oa!V$oa![$oa%f$oa!d$oa~O#t)`O~P!&_Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{%[O!P$|O![$}O!f%aO!i$yO#g%bO$V%_O$r%]O$t%^O$w%`O(O(rO(QTO(TUO([$vO(t%OO(u%QO~Og(kP~P!+hO})eO!d)dO![$]X$Y$]X$[$]X$^$]X$e$]X~O!d)dO![(vX$Y(vX$[(vX$^(vX$e(vX~O})eO~P!-qO})eO![(vX$Y(vX$[(vX$^(vX$e(vX~O![)gO$Y)kO$[)fO$^)fO$e)lO~O!X)oO~P!(oO$[$hO$^$gO$e)sO~Ok$xX}$xX!P$xX#P$xX(t$xX(u$xX~OgjXg$xXkjX!YjX#]jX~P!/gOp)uO~Ou)vO(])wO(^)yO~Ok*SO}){O!P)|O(t%OO(u%QO~Og)zO~P!0pOg*TO~Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{;YO!P*VO![*WO!f<jO!i$yO#g;`O$V%_O$r;[O$t;^O$w%`O(QTO(TUO([$vO(t%OO(u%QO~O!X*ZO(O*UO!h(zP~P!1_O#h*]O~O!i*^O~Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{;YO!P$|O![$}O!f<jO!i$yO#g;`O$V%_O$r;[O$t;^O$w%`O(O*`O(QTO(TUO([$vO(t%OO(u%QO~O!X*cO!V({P~P!3^Oo*oO!P*gO!_*mO!`*fO!a*fO!i*^O#X*nO%]*iO(P!lO(`!mO~O!Z*lO~P!5RO#P$dOk(ZX}(ZX!P(ZX(t(ZX(u(ZX!Y(ZX#](ZX~Og(ZX#}(ZX~P!5zOk*tO#]*sOg(YX!Y(YX~O!Y*uOg(XX~O(O&WOg(XP~O!i*|O~O(O(rO~Om+QO!P%fO!X#iO![%gO!y]O#f#lO#g#iO(O%eO!h(nP~O!d#vO#h+RO~O!P%fO!X+TO!Y(YO![%gO(O%eO!V(qP~Op'XO!P+VO!X+UO(QTO(TUO(`(xO~O!Z(sP~P!8uO!Y+WOa)PX'u)PX~OP$]OR#zO[$cOo$QO}#yO!P#{O!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO#w$VO#y$XO#z$YO([VO(m$ZO(t#|O(u#}O~Oa!ga!Y!ga'u!ga's!ga!V!ga!h!gas!ga![!ga%f!ga!d!ga~P!9mOR#zO}#yO!P#{O!i#xO([VOP!oa[!oao!oa!Y!oa!m!oa#O!oa#k!oa#l!oa#m!oa#n!oa#o!oa#p!oa#q!oa#r!oa#s!oa#u!oa#w!oa#y!oa#z!oa(m!oa(t!oa(u!oa~Oa!oa'u!oa's!oa!V!oa!h!oas!oa![!oa%f!oa!d!oa~P!<TOR#zO}#yO!P#{O!i#xO([VOP!qa[!qao!qa!Y!qa!m!qa#O!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#q!qa#r!qa#s!qa#u!qa#w!qa#y!qa#z!qa(m!qa(t!qa(u!qa~Oa!qa'u!qa's!qa!V!qa!h!qas!qa![!qa%f!qa!d!qa~P!>kOh%WOk+aO![']O%f+`O~O!d+cOa(WX![(WX'u(WX!Y(WX~Oa%lO![XO'u%lO~Oh%WO!i%cO~Oh%WO!i%cO(O%eO~O!d#vO#h(tO~Ob+nO%g+oO(O+kO(QTO(TUO!Z)TP~O!Y+pO`)SX~O[+tO~O`+uO~O![%}O(O%eO(P!lO`)SP~Oh%WO#]+zO~Oh%WOk+}O![$}O~O![,PO~O},RO![XO~O%k%tO~O!u,WO~Oe,]O~Ob,^O(O#nO(QTO(TUO!Z)RP~Oe%{O~O%g!QO(O&WO~P=RO[,cO`,bO~OPYOQYOSfOdzOeyOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO!fuO!iZO!lYO!mYO!nYO!pvO!uxO!y]O%e}O(QTO(TUO([VO(j[O(yiO~O![!eO!r!gO$V!kO(O!dO~P!EkO`,bOa%lO'u%lO~OPYOQYOSfOd!jOe!iOmkOoYOpkOqkOwkOyYO{YO!PWO!TkO!UkO![!eO!fuO!iZO!lYO!mYO!nYO!pvO!u!hO$V!kO(O!dO(QTO(TUO([VO(j[O(yiO~Oa,hO!rwO#t!OO%i!OO%j!OO%k!OO~P!HTO!i&lO~O&Y,nO~O![,pO~O&k,rO&m,sOP&haQ&haS&haY&haa&had&hae&ham&hao&hap&haq&haw&hay&ha{&ha!P&ha!T&ha!U&ha![&ha!f&ha!i&ha!l&ha!m&ha!n&ha!p&ha!r&ha!u&ha!y&ha#t&ha$V&ha%e&ha%g&ha%i&ha%j&ha%k&ha%n&ha%p&ha%s&ha%t&ha%v&ha&S&ha&Y&ha&[&ha&^&ha&`&ha&c&ha&i&ha&o&ha&q&ha&s&ha&u&ha&w&ha's&ha(O&ha(Q&ha(T&ha([&ha(j&ha(y&ha!Z&ha&a&hab&ha&f&ha~O(O,xO~Oh!bX!Y!OX!Z!OX!d!OX!d!bX!i!bX#]!OX~O!Y!bX!Z!bX~P# ZO!d,}O#],|Oh(eX!Y#eX!Y(eX!Z#eX!Z(eX!d(eX!i(eX~Oh%WO!d-PO!i%cO!Y!^X!Z!^X~Op!nO!P!oO(QTO(TUO(`!mO~OP:kOQ:kOSfOd<fOe!iOmkOo:kOpkOqkOwkOy:kO{:kO!PWO!TkO!UkO![!eO!f:nO!iZO!l:kO!m:kO!n:kO!p:oO!r:rO!u!hO$V!kO(QTO(TUO([VO(j[O(y<dO~O(O;fO~P##_O!Y-TO!Z(dX~O!Z-VO~O!d,}O#],|O!Y#eX!Z#eX~O!Y-WO!Z(sX~O!Z-YO~O!`-ZO!a-ZO(P!lO~P#!|O!Z-^O~P'_Ok-aO![']O~O!V-fO~Op!xa!_!xa!`!xa!a!xa#Q!xa#R!xa#S!xa#T!xa#U!xa#X!xa#Y!xa(P!xa(Q!xa(T!xa(`!xa(j!xa~P!#ZO!m-kO#]-iO~PCSO!`-mO!a-mO(P!lO~PCrOa%lO#]-iO'u%lO~Oa%lO!d#vO#]-iO'u%lO~Oa%lO!d#vO!m-kO#]-iO'u%lO(m'mO~O'z'uO'{'uO'|-rO~Os-sO~O!V'Sa!Y'Sa~P!9mO!X-wO!V'SX!Y'SX~P%[O!Y(RO!V(ca~O!V(ca~PGfO!Y(YO!V(qa~O!P%fO!X-{O![%gO(O%eO!V'YX!Y'YX~O#]-}O!Y(oa!h(oaa(oa'u(oa~O!d#vO~P#+eO!Y(fO!h(na~O!P%fO![%gO#g.RO(O%eO~Om.WO!P%fO!X.TO![%gO!y]O#f.VO#g.TO(O%eO!Y']X!h']X~OR.[O!i#xO~Oh%WOk._O![']O%f.^O~Oa#`i!Y#`i'u#`i's#`i!V#`i!h#`is#`i![#`i%f#`i!d#`i~P!9mOk<pO}){O!P)|O(t%OO(u%QO~O#h#[aa#[a#]#[a'u#[a!Y#[a!h#[a![#[a!V#[a~P#.aO#h(ZXP(ZXR(ZX[(ZXa(ZXo(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX'u(ZX([(ZX(m(ZX!h(ZX!V(ZX's(ZXs(ZX![(ZX%f(ZX!d(ZX~P!5zO!Y.lO!h(fX~P!9mO!h.oO~O!V.qO~OP$]OR#zO}#yO!P#{O!i#xO!m$]O([VO[#jia#jio#ji!Y#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#k#ji~P#1|O#k$OO~P#1|OP$]OR#zO}#yO!P#{O!i#xO!m$]O#k$OO#l$PO#m$PO#n$PO([VO[#jia#ji!Y#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~Oo#ji~P#4kOo$QO~P#4kOP$]OR#zOo$QO}#yO!P#{O!i#xO!m$]O#k$OO#l$PO#m$PO#n$PO#o$RO([VOa#ji!Y#ji#u#ji#w#ji#y#ji#z#ji'u#ji(m#ji(t#ji(u#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O[#ji#O#ji#p#ji#q#ji#r#ji#s#ji~P#7YO[$cO#O$SO#p$SO#q$SO#r$bO#s$SO~P#7YOP$]OR#zO[$cOo$QO}#yO!P#{O!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO([VO(u#}Oa#ji!Y#ji#y#ji#z#ji'u#ji(m#ji(t#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#w$VO~P#:WO#w#ji~P#:WOP$]OR#zO[$cOo$QO}#yO!P#{O!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO([VOa#ji!Y#ji#y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~O#w#ji(t#ji(u#ji~P#<uO#w$VO(t#|O(u#}O~P#<uOP$]OR#zO[$cOo$QO}#yO!P#{O!i#xO!m$]O#O$SO#k$OO#l$PO#m$PO#n$PO#o$RO#p$SO#q$SO#r$bO#s$SO#u$TO#w$VO#y$XO([VO(t#|O(u#}O~Oa#ji!Y#ji#z#ji'u#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~P#?jOP]XR]X[]Xo]X}]X!P]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X!Y]X!Z]X~O#}]X~P#BQOP$]OR#zO[;SOo:vO}#yO!P#{O!i#xO!m$]O#O:xO#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O#z;OO([VO(m$ZO(t#|O(u#}O~O#}.sO~P#D_O#P$dO#];TO$P;TO#}(bX!Z(bX~P! YOa'`a!Y'`a'u'`a's'`a!h'`a!V'`as'`a!['`a%f'`a!d'`a~P!9mOP#jiR#ji[#jia#jio#ji!Y#ji!i#ji!m#ji#O#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji'u#ji([#ji(m#ji's#ji!V#ji!h#jis#ji![#ji%f#ji!d#ji~P#.aO!Y.wOg(kX~P!0pOg.yO~Oa$Oi!Y$Oi'u$Oi's$Oi!V$Oi!h$Ois$Oi![$Oi%f$Oi!d$Oi~P!9mO$[.zO$^.zO~O$[.{O$^.{O~O!d)dO#].|O![$bX$Y$bX$[$bX$^$bX$e$bX~O!X.}O~O![)gO$Y/PO$[)fO$^)fO$e/QO~O!Y;PO!Z(aX~P#D_O!Z/RO~O!d)dO$e(vX~O$e/TO~Ou)vO(])wO(^/WO~O!V/[O~P!&_O(t%OOk%^a}%^a!P%^a(u%^a!Y%^a#]%^a~Og%^a#}%^a~P#L{O(u%QOk%`a}%`a!P%`a(t%`a!Y%`a#]%`a~Og%`a#}%`a~P#MnO!YfX!dfX!hfX!h$xX(mfX~P!/gO!X/eO!Y(YO(O/dO!V(qP!V({P~P!1_Oo*oO!_*mO!`*fO!a*fO!i*^O#X*nO%]*iO(P!lO~Op'XO!P/fO!X+UO!Z*lO(QTO(TUO(`;cO!Z(sP~P$ XO!h/gO~P#.aO!Y/hO!d#vO(m'mO!h(zX~O!h/mO~O!P%fO!X*ZO![%gO(O%eO!h(zP~O#h/oO~O!V$xX!Y$xX!d%PX~P!/gO!Y/pO!V({X~P#.aO!d/rO~O!V/tO~Oh%WOo/xO!d#vO!i%cO(m'mO~O(O/zO~O!d+cO~Oa%lO!Y0OO'u%lO~O!Z0QO~P!5RO!`0RO!a0RO(P!lO(`!mO~O!P0TO(`!mO~O#X0UO~Og%^a!Y%^a#]%^a#}%^a~P!0pOg%`a!Y%`a#]%`a#}%`a~P!0pO(O&WOg'iX!Y'iX~O!Y*uOg(Xa~Og0_O~OR0`O}0`O!P0aO#P$dOkza(tza(uza!Yza#]za~Ogza#}za~P$&zO}){O!P)|Ok$qa(t$qa(u$qa!Y$qa#]$qa~Og$qa#}$qa~P$'sO}){O!P)|Ok$sa(t$sa(u$sa!Y$sa#]$sa~Og$sa#}$sa~P$(fO#h0dO~Og%Ra!Y%Ra#]%Ra#}%Ra~P!0pO!d#vO~O#h0gO~O!Y+WOa)Pa'u)Pa~OR#zO}#yO!P#{O!i#xO([VOP!oi[!oio!oi!Y!oi!m!oi#O!oi#k!oi#l!oi#m!oi#n!oi#o!oi#p!oi#q!oi#r!oi#s!oi#u!oi#w!oi#y!oi#z!oi(m!oi(t!oi(u!oi~Oa!oi'u!oi's!oi!V!oi!h!ois!oi![!oi%f!oi!d!oi~P$*TOh%WOo$uOp$tOq$tOw%YOy%ZO{;YO!P$|O![$}O!f<jO!i$yO#g;`O$V%_O$r;[O$t;^O$w%`O(QTO(TUO([$vO(t%OO(u%QO~Om0pO(O0oO~P$,kO!d+cOa(Wa![(Wa'u(Wa!Y(Wa~O#h0vO~O[]X!YfX!ZfX~O!Y0wO!Z)TX~O!Z0yO~O[0zO~Ob0|O(O+kO(QTO(TUO~O![%}O(O%eO`'qX!Y'qX~O!Y+pO`)Sa~O!h1PO~P!9mO[1SO~O`1TO~O#]1WO~Ok1ZO![$}O~O(`(xO!Z)QP~Oh%WOk1dO![1aO%f1cO~O[1nO!Y1lO!Z)RX~O!Z1oO~O`1qOa%lO'u%lO~O(O#nO(QTO(TUO~O#P$dO#]$eO$P$eOP(bXR(bX[(bXo(bX}(bX!P(bX!Y(bX!i(bX!m(bX#O(bX#k(bX#l(bX#m(bX#n(bX#o(bX#p(bX#q(bX#r(bX#u(bX#w(bX#y(bX#z(bX([(bX(m(bX(t(bX(u(bX~O#s1tO&W1uOa(bX~P$2RO#]$eO#s1tO&W1uO~Oa1wO~P%[Oa1yO~O&a1|OP&_iQ&_iS&_iY&_ia&_id&_ie&_im&_io&_ip&_iq&_iw&_iy&_i{&_i!P&_i!T&_i!U&_i![&_i!f&_i!i&_i!l&_i!m&_i!n&_i!p&_i!r&_i!u&_i!y&_i#t&_i$V&_i%e&_i%g&_i%i&_i%j&_i%k&_i%n&_i%p&_i%s&_i%t&_i%v&_i&S&_i&Y&_i&[&_i&^&_i&`&_i&c&_i&i&_i&o&_i&q&_i&s&_i&u&_i&w&_i's&_i(O&_i(Q&_i(T&_i([&_i(j&_i(y&_i!Z&_ib&_i&f&_i~Ob2SO!Z2QO&f2RO~P`O![XO!i2UO~O&m,sOP&hiQ&hiS&hiY&hia&hid&hie&him&hio&hip&hiq&hiw&hiy&hi{&hi!P&hi!T&hi!U&hi![&hi!f&hi!i&hi!l&hi!m&hi!n&hi!p&hi!r&hi!u&hi!y&hi#t&hi$V&hi%e&hi%g&hi%i&hi%j&hi%k&hi%n&hi%p&hi%s&hi%t&hi%v&hi&S&hi&Y&hi&[&hi&^&hi&`&hi&c&hi&i&hi&o&hi&q&hi&s&hi&u&hi&w&hi's&hi(O&hi(Q&hi(T&hi([&hi(j&hi(y&hi!Z&hi&a&hib&hi&f&hi~O!V2[O~O!Y!^a!Z!^a~P#D_Op!nO!P!oO!X2bO(`!mO!Y'TX!Z'TX~P@YO!Y-TO!Z(da~O!Y'ZX!Z'ZX~P!8uO!Y-WO!Z(sa~O!Z2iO~P'_Oa%lO#]2rO'u%lO~Oa%lO!d#vO#]2rO'u%lO~Oa%lO!d#vO!m2vO#]2rO'u%lO(m'mO~Oa%lO'u%lO~P!9mO!Y$`Os$oa~O!V'Si!Y'Si~P!9mO!Y(RO!V(ci~O!Y(YO!V(qi~O!V(ri!Y(ri~P!9mO!Y(oi!h(oia(oi'u(oi~P!9mO#]2xO!Y(oi!h(oia(oi'u(oi~O!Y(fO!h(ni~O!P%fO![%gO!y]O#f2}O#g2|O(O%eO~O!P%fO![%gO#g2|O(O%eO~Ok3UO![']O%f3TO~Oh%WOk3UO![']O%f3TO~O#h%^aP%^aR%^a[%^aa%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^as%^a![%^a%f%^a!d%^a~P#L{O#h%`aP%`aR%`a[%`aa%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`as%`a![%`a%f%`a!d%`a~P#MnO#h%^aP%^aR%^a[%^aa%^ao%^a!Y%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a'u%^a([%^a(m%^a!h%^a!V%^a's%^a#]%^as%^a![%^a%f%^a!d%^a~P#.aO#h%`aP%`aR%`a[%`aa%`ao%`a!Y%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a'u%`a([%`a(m%`a!h%`a!V%`a's%`a#]%`as%`a![%`a%f%`a!d%`a~P#.aO#hzaPza[zaazaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza'uza([za(mza!hza!Vza'szasza![za%fza!dza~P$&zO#h$qaP$qaR$qa[$qaa$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa'u$qa([$qa(m$qa!h$qa!V$qa's$qas$qa![$qa%f$qa!d$qa~P$'sO#h$saP$saR$sa[$saa$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa'u$sa([$sa(m$sa!h$sa!V$sa's$sas$sa![$sa%f$sa!d$sa~P$(fO#h%RaP%RaR%Ra[%Raa%Rao%Ra!Y%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra'u%Ra([%Ra(m%Ra!h%Ra!V%Ra's%Ra#]%Ras%Ra![%Ra%f%Ra!d%Ra~P#.aOa#`q!Y#`q'u#`q's#`q!V#`q!h#`qs#`q![#`q%f#`q!d#`q~P!9mO!X3^O!Y'UX!h'UX~P%[O!Y.lO!h(fa~O!Y.lO!h(fa~P!9mO!V3aO~O#}!ka!Z!ka~PKPO#}!ga!Y!ga!Z!ga~P#D_O#}!oa!Z!oa~P!<TO#}!qa!Z!qa~P!>kOg'XX!Y'XX~P!+hO!Y.wOg(ka~OSfO![3uO$c3vO~O!Z3zO~Os3{O~P#.aOa$lq!Y$lq'u$lq's$lq!V$lq!h$lqs$lq![$lq%f$lq!d$lq~P!9mO!V3|O~P#.aO}){O!P)|O(u%QOk'ea(t'ea!Y'ea#]'ea~Og'ea#}'ea~P%+]O}){O!P)|Ok'ga(t'ga(u'ga!Y'ga#]'ga~Og'ga#}'ga~P%,OO(m$ZO~P#.aO!VfX!V$xX!YfX!Y$xX!d%PX#]fX~P!/gO(O;lO~P!1_OmkO(O4OO~P.iO!P%fO!X4QO![%gO(O%eO!Y'aX!h'aX~O!Y/hO!h(za~O!Y/hO!d#vO!h(za~O!Y/hO!d#vO(m'mO!h(za~Og$zi!Y$zi#]$zi#}$zi~P!0pO!X4YO!V'cX!Y'cX~P!3^O!Y/pO!V({a~O!Y/pO!V({a~P#.aO!d#vO#s4bO~Oo4eO!d#vO(m'mO~O(t%OOk%^i}%^i!P%^i(u%^i!Y%^i#]%^i~Og%^i#}%^i~P%0^O(u%QOk%`i}%`i!P%`i(t%`i!Y%`i#]%`i~Og%`i#}%`i~P%1POg(Yi!Y(Yi~P!0pO#]4lOg(Yi!Y(Yi~P!0pO!h4oO~Oa$mq!Y$mq'u$mq's$mq!V$mq!h$mqs$mq![$mq%f$mq!d$mq~P!9mO!V4sO~O!Y4tO![(|X~P#.aOa$xX![$xX%Z]X'u$xX!Y$xX~P!/gO%Z4wOalXklX}lX!PlX![lX'ulX(tlX(ulX!YlX~O%Z4wO~Ob4}O%g5OO(O+kO(QTO(TUO!Y'pX!Z'pX~O!Y0wO!Z)Ta~O[5SO~O`5TO~Oa%lO'u%lO~P#.aO![$}O~P#.aO!Y5]O#]5_O!Z)QX~O!Z5`O~Op!nO!P5aO!_!yO!`!vO!a!vO!y:lO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5fO#Y!zO(P!lO(QTO(TUO(`!mO(j!sO~O!Z5eO~P%6ZOk5kO![1aO%f5jO~Oh%WOk5kO![1aO%f5jO~Ob5rO(O#nO(QTO(TUO!Y'oX!Z'oX~O!Y1lO!Z)Ra~O(QTO(TUO(`5tO~O`5xO~O#s5{O&W5|O~PMlO!h5}O~P%[Oa6PO~Oa6PO~P%[Ob2SO!Z6UO&f2RO~P`O!d6WO~O!d6YOh(ei!Y(ei!Z(ei!d(ei!i(ei~O!Y#ei!Z#ei~P#D_O#]6ZO!Y#ei!Z#ei~O!Y!^i!Z!^i~P#D_Oa%lO#]6dO'u%lO~Oa%lO!d#vO#]6dO'u%lO~O!Y(oq!h(oqa(oq'u(oq~P!9mO!Y(fO!h(nq~O!P%fO![%gO#g6kO(O%eO~O![']O%f6nO~Ok6rO![']O%f6nO~O#h'eaP'eaR'ea['eaa'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea'u'ea(['ea(m'ea!h'ea!V'ea's'eas'ea!['ea%f'ea!d'ea~P%+]O#h'gaP'gaR'ga['gaa'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga'u'ga(['ga(m'ga!h'ga!V'ga's'gas'ga!['ga%f'ga!d'ga~P%,OO#h$ziP$ziR$zi[$zia$zio$zi!Y$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi'u$zi([$zi(m$zi!h$zi!V$zi's$zi#]$zis$zi![$zi%f$zi!d$zi~P#.aO#h%^iP%^iR%^i[%^ia%^io%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i'u%^i([%^i(m%^i!h%^i!V%^i's%^is%^i![%^i%f%^i!d%^i~P%0^O#h%`iP%`iR%`i[%`ia%`io%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i'u%`i([%`i(m%`i!h%`i!V%`i's%`is%`i![%`i%f%`i!d%`i~P%1PO!Y'Ua!h'Ua~P!9mO!Y.lO!h(fi~O#}#`i!Y#`i!Z#`i~P#D_OP$]OR#zO}#yO!P#{O!i#xO!m$]O([VO[#jio#ji#O#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O#k#ji~P%HpO#k:tO~P%HpOP$]OR#zO}#yO!P#{O!i#xO!m$]O#k:tO#l:uO#m:uO#n:uO([VO[#ji#O#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~Oo#ji~P%JxOo:vO~P%JxOP$]OR#zOo:vO}#yO!P#{O!i#xO!m$]O#k:tO#l:uO#m:uO#n:uO#o:wO([VO#u#ji#w#ji#y#ji#z#ji#}#ji(m#ji(t#ji(u#ji!Y#ji!Z#ji~O[#ji#O#ji#p#ji#q#ji#r#ji#s#ji~P%MQO[;SO#O:xO#p:xO#q:xO#r;RO#s:xO~P%MQOP$]OR#zO[;SOo:vO}#yO!P#{O!i#xO!m$]O#O:xO#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO([VO(u#}O#y#ji#z#ji#}#ji(m#ji(t#ji!Y#ji!Z#ji~O#w:{O~P& iO#w#ji~P& iOP$]OR#zO[;SOo:vO}#yO!P#{O!i#xO!m$]O#O:xO#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO([VO#y#ji#z#ji#}#ji(m#ji!Y#ji!Z#ji~O#w#ji(t#ji(u#ji~P&#qO#w:{O(t#|O(u#}O~P&#qOP$]OR#zO[;SOo:vO}#yO!P#{O!i#xO!m$]O#O:xO#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O([VO(t#|O(u#}O~O#z#ji#}#ji(m#ji!Y#ji!Z#ji~P&&POa#{y!Y#{y'u#{y's#{y!V#{y!h#{ys#{y![#{y%f#{y!d#{y~P!9mOk<qO}){O!P)|O(t%OO(u%QO~OP#jiR#ji[#jio#ji!i#ji!m#ji#O#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji([#ji(m#ji!Y#ji!Z#ji~P&(tO#P$dOP(ZXR(ZX[(ZXk(ZXo(ZX}(ZX!P(ZX!i(ZX!m(ZX#O(ZX#k(ZX#l(ZX#m(ZX#n(ZX#o(ZX#p(ZX#q(ZX#r(ZX#s(ZX#u(ZX#w(ZX#y(ZX#z(ZX#}(ZX([(ZX(m(ZX(t(ZX(u(ZX!Y(ZX!Z(ZX~O#}$Oi!Y$Oi!Z$Oi~P#D_O#}!oi!Z!oi~P$*TOg'Xa!Y'Xa~P!0pO!Z7UO~O!Y'`a!Z'`a~P#D_OP]XR]X[]Xo]X}]X!P]X!V]X!Y]X!i]X!m]X#O]X#P]X#]]X#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!d%WX#s%WX~P&-}O!d#vO(m'mO!Y'aa!h'aa~O!Y/hO!h(zi~O!Y/hO!d#vO!h(zi~Og$zq!Y$zq#]$zq#}$zq~P!0pO!V'ca!Y'ca~P#.aO!d7]O~O!Y/pO!V({i~P#.aO!Y/pO!V({i~O!V7aO~O!d#vO#s7fO~Oo7gO!d#vO(m'mO~O}){O!P)|O(u%QOk'fa(t'fa!Y'fa#]'fa~Og'fa#}'fa~P&2mO}){O!P)|Ok'ha(t'ha(u'ha!Y'ha#]'ha~Og'ha#}'ha~P&3`O!V7iO~Og$|q!Y$|q#]$|q#}$|q~P!0pOa$my!Y$my'u$my's$my!V$my!h$mys$my![$my%f$my!d$my~P!9mO!d6YO~O!Y4tO![(|a~O![']OP$SaR$Sa[$Sao$Sa}$Sa!P$Sa!Y$Sa!i$Sa!m$Sa#O$Sa#k$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#u$Sa#w$Sa#y$Sa#z$Sa([$Sa(m$Sa(t$Sa(u$Sa~O%f6nO~P&5iOa#`y!Y#`y'u#`y's#`y!V#`y!h#`ys#`y![#`y%f#`y!d#`y~P!9mO[7nO~Ob7pO(O+kO(QTO(TUO~O!Y0wO!Z)Ti~O`7tO~O(`(xO!Y'lX!Z'lX~O!Y5]O!Z)Qa~O!Z7}O~P%6ZOp!nO!P8OO(QTO(TUO(`!mO(j!sO~O![1aO~O![1aO%f8QO~Ok8TO![1aO%f8QO~O[8YO!Y'oa!Z'oa~O!Y1lO!Z)Ri~O!h8^O~O!h8_O~O!h8bO~O!h8bO~P%[Oa8dO~O!d8eO~O!h8fO~O!Y(ri!Z(ri~P#D_Oa%lO#]8nO'u%lO~O!Y(oy!h(oya(oy'u(oy~P!9mO!Y(fO!h(ny~O%f8qO~P&5iO![']O%f8qO~O#h$zqP$zqR$zq[$zqa$zqo$zq!Y$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq'u$zq([$zq(m$zq!h$zq!V$zq's$zq#]$zqs$zq![$zq%f$zq!d$zq~P#.aO#h'faP'faR'fa['faa'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa'u'fa(['fa(m'fa!h'fa!V'fa's'fas'fa!['fa%f'fa!d'fa~P&2mO#h'haP'haR'ha['haa'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha'u'ha(['ha(m'ha!h'ha!V'ha's'has'ha!['ha%f'ha!d'ha~P&3`O#h$|qP$|qR$|q[$|qa$|qo$|q!Y$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q'u$|q([$|q(m$|q!h$|q!V$|q's$|q#]$|qs$|q![$|q%f$|q!d$|q~P#.aO!Y'Ui!h'Ui~P!9mO#}#`q!Y#`q!Z#`q~P#D_O(t%OOP%^aR%^a[%^ao%^a!i%^a!m%^a#O%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a([%^a(m%^a!Y%^a!Z%^a~Ok%^a}%^a!P%^a(u%^a~P&FgO(u%QOP%`aR%`a[%`ao%`a!i%`a!m%`a#O%`a#k%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#u%`a#w%`a#y%`a#z%`a#}%`a([%`a(m%`a!Y%`a!Z%`a~Ok%`a}%`a!P%`a(t%`a~P&HkOk<qO}){O!P)|O(u%QO~P&FgOk<qO}){O!P)|O(t%OO~P&HkOR0`O}0`O!P0aO#P$dOPza[zakzaoza!iza!mza#Oza#kza#lza#mza#nza#oza#pza#qza#rza#sza#uza#wza#yza#zza#}za([za(mza(tza(uza!Yza!Zza~O}){O!P)|OP$qaR$qa[$qak$qao$qa!i$qa!m$qa#O$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa([$qa(m$qa(t$qa(u$qa!Y$qa!Z$qa~O}){O!P)|OP$saR$sa[$sak$sao$sa!i$sa!m$sa#O$sa#k$sa#l$sa#m$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#u$sa#w$sa#y$sa#z$sa#}$sa([$sa(m$sa(t$sa(u$sa!Y$sa!Z$sa~OP%RaR%Ra[%Rao%Ra!i%Ra!m%Ra#O%Ra#k%Ra#l%Ra#m%Ra#n%Ra#o%Ra#p%Ra#q%Ra#r%Ra#s%Ra#u%Ra#w%Ra#y%Ra#z%Ra#}%Ra([%Ra(m%Ra!Y%Ra!Z%Ra~P&(tO#}$lq!Y$lq!Z$lq~P#D_O#}$mq!Y$mq!Z$mq~P#D_O!Z9OO~O#}9PO~P!0pO!d#vO!Y'ai!h'ai~O!d#vO(m'mO!Y'ai!h'ai~O!Y/hO!h(zq~O!V'ci!Y'ci~P#.aO!Y/pO!V({q~O!V9VO~P#.aO!V9VO~Og(Yy!Y(Yy~P!0pO!Y'ja!['ja~P#.aOa%Yq![%Yq'u%Yq!Y%Yq~P#.aO[9[O~O!Y0wO!Z)Tq~O#]9`O!Y'la!Z'la~O!Y5]O!Z)Qi~P#D_O![1aO%f9dO~O(QTO(TUO(`9iO~O!Y1lO!Z)Rq~O!h9lO~O!h9mO~O!h9nO~O!h9nO~P%[O#]9qO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#D_O%f9vO~P&5iO![']O%f9vO~O#}#{y!Y#{y!Z#{y~P#D_OP$ziR$zi[$zio$zi!i$zi!m$zi#O$zi#k$zi#l$zi#m$zi#n$zi#o$zi#p$zi#q$zi#r$zi#s$zi#u$zi#w$zi#y$zi#z$zi#}$zi([$zi(m$zi!Y$zi!Z$zi~P&(tO}){O!P)|O(u%QOP'eaR'ea['eak'eao'ea!i'ea!m'ea#O'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(['ea(m'ea(t'ea!Y'ea!Z'ea~O}){O!P)|OP'gaR'ga['gak'gao'ga!i'ga!m'ga#O'ga#k'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#u'ga#w'ga#y'ga#z'ga#}'ga(['ga(m'ga(t'ga(u'ga!Y'ga!Z'ga~O(t%OOP%^iR%^i[%^ik%^io%^i}%^i!P%^i!i%^i!m%^i#O%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i([%^i(m%^i(u%^i!Y%^i!Z%^i~O(u%QOP%`iR%`i[%`ik%`io%`i}%`i!P%`i!i%`i!m%`i#O%`i#k%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#u%`i#w%`i#y%`i#z%`i#}%`i([%`i(m%`i(t%`i!Y%`i!Z%`i~O#}$my!Y$my!Z$my~P#D_O#}#`y!Y#`y!Z#`y~P#D_O!d#vO!Y'aq!h'aq~O!Y/hO!h(zy~O!V'cq!Y'cq~P#.aO!V:PO~P#.aO!Y0wO!Z)Ty~O!Y5]O!Z)Qq~O![1aO%f:WO~O!h:ZO~O%f:`O~P&5iOP$zqR$zq[$zqo$zq!i$zq!m$zq#O$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq([$zq(m$zq!Y$zq!Z$zq~P&(tO}){O!P)|O(u%QOP'faR'fa['fak'fao'fa!i'fa!m'fa#O'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(['fa(m'fa(t'fa!Y'fa!Z'fa~O}){O!P)|OP'haR'ha['hak'hao'ha!i'ha!m'ha#O'ha#k'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#u'ha#w'ha#y'ha#z'ha#}'ha(['ha(m'ha(t'ha(u'ha!Y'ha!Z'ha~OP$|qR$|q[$|qo$|q!i$|q!m$|q#O$|q#k$|q#l$|q#m$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#u$|q#w$|q#y$|q#z$|q#}$|q([$|q(m$|q!Y$|q!Z$|q~P&(tOg%b!Z!Y%b!Z#]%b!Z#}%b!Z~P!0pO!Y'lq!Z'lq~P#D_O!Y#e!Z!Z#e!Z~P#D_O#h%b!ZP%b!ZR%b!Z[%b!Za%b!Zo%b!Z!Y%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z'u%b!Z([%b!Z(m%b!Z!h%b!Z!V%b!Z's%b!Z#]%b!Zs%b!Z![%b!Z%f%b!Z!d%b!Z~P#.aOP%b!ZR%b!Z[%b!Zo%b!Z!i%b!Z!m%b!Z#O%b!Z#k%b!Z#l%b!Z#m%b!Z#n%b!Z#o%b!Z#p%b!Z#q%b!Z#r%b!Z#s%b!Z#u%b!Z#w%b!Z#y%b!Z#z%b!Z#}%b!Z([%b!Z(m%b!Z!Y%b!Z!Z%b!Z~P&(tOs(aX~P1qO}%pO~P!(oO(P!lO~P!(oO!VfX!YfX#]fX~P&-}OP]XR]X[]Xo]X}]X!P]X!Y]X!YfX!i]X!m]X#O]X#P]X#]]X#]fX#hfX#k]X#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#u]X#w]X#y]X#z]X$P]X([]X(m]X(t]X(u]X~O!dfX!h]X!hfX(mfX~P'CvOP:kOQ:kOSfOd<fOe!iOmkOo:kOpkOqkOwkOy:kO{:kO!PWO!TkO!UkO![XO!f:nO!iZO!l:kO!m:kO!n:kO!p:oO!r:rO!u!hO$V!kO(O)YO(QTO(TUO([VO(j[O(y<dO~O!Y;PO!Z$oa~Oh%WOm%XOo$uOp$tOq$tOw%YOy%ZO{;ZO!P$|O![$}O!f<kO!i$yO#g;aO$V%_O$r;]O$t;_O$w%`O(O(rO(QTO(TUO([$vO(t%OO(u%QO~O#t)`O~P'HlOo!bX(m!bX~P# ZO!Z]X!ZfX~P'CvO!VfX!V$xX!YfX!Y$xX#]fX~P!/gO#h:sO~O!d#vO#h:sO~O#];TO~O#s:xO~O#];dO!Y(rX!Z(rX~O#];TO!Y(pX!Z(pX~O#h;eO~Og;gO~P!0pO#h;mO~O#h;nO~O!d#vO#h;oO~O!d#vO#h;eO~O#};pO~P#D_O#h;qO~O#h;rO~O#h;wO~O#h;xO~O#h;yO~O#h;zO~O#};{O~P!0pO#};|O~P!0pO#P#Q#R#T#U#X#f#g#r(y$r$t$w%Z%e%f%g%n%p%s%t%v%x~'yT#l!U'w(P#mp#k#no}'x$['x(O$^(`~\",\n  goto: \"$2y)XPPPPPP)YPP)]P)nP+O/PPPPP5wPP6_PP<U?kP@OP@OPPP@OPBOP@OP@OP@OPBSPBXPBvPGoPPPGsPPPPGsJuPPPJ{KwPGsPGsPPNVGsPPPGsPGsP!!^GsP!%s!&x!'RP!'u!'y!'u!+VPPPPPPP!+v!&xPP!,W!-QP!/tGsGs!/y!3U!7l!7l!;jPPP!;rGsPPPPPPPPPPP!?QP!@_PPGs!ApPGsPGsGsGsGsGsPGs!CSP!F]P!IbP!If!Ip!It!ItP!FYP!Ix!IxP!L}P!MRGsGs!MX#!]BS@OP@OP@O@OP##i@O@O#%s@O#(c@O#*g@O@O#+V#-c#-c#-h#-q#-c#-zP#-cP@O#.d@O#2T@O@O5wPPP#5zPPP#6e#6eP#6eP#6{#6ePP#7RP#6xP#6x#7f#6x#8Q#8W5t)]#8Z)]P#8b#8b#8bP)]P)]P)]P)]PP)]P#8h#8kP#8k)]P#8oP#8rP)]P)]P)]P)]P)]P)])]PP#8x#9O#9Z#9a#9g#9m#9s#:R#:X#:c#:i#:s#:y#;Z#;a#<R#<e#<k#<q#=P#=f#?T#?c#?j#AO#A^#Bx#CW#C^#Cd#Cj#Ct#Cz#DQ#D[#Dn#DtPPPPPPPPPP#DzPPPPPPP#Eo#Hv#JV#J^#JfPPP$ lP$ u$$m$+V$+Y$+]$+x$+{$,S$,[P$,b$,eP$-R$-V$-}$/]$/b$/xPP$/}$0T$0XP$0[$0`$0d$1Y$1q$2Y$2^$2a$2d$2j$2m$2q$2uR!|RoqOXst!Z#d%k&o&q&r&t,k,p1|2PY!vQ']-]1a5dQ%rvQ%zyQ&R|Q&g!VS'T!e-TQ'c!iS'i!r!yU*f$}*W*kQ+i%{Q+v&TQ,[&aQ-Z'[Q-e'dQ-m'jQ0R*mQ1k,]R;b:o%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5a5k5{5|6P6d8O8T8d8nS#q]:l!r)[$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gU*y%[;Y;ZQ+n%}Q,^&dQ,e&lQ0m+aQ0q+cQ0|+oQ1s,cQ3Q._Q4}0wQ5r1lQ6p3UQ7p5OR8t6r'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gt!nQ!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5d5f$z$ti#v$b$c$d$y$|%P%R%]%^%b)v)|*O*Q*S*V*]*c*s*t+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4l4t4w5j6n7]7f8Q8q9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ&U|Q'R!eU'X%g*W-WQ+n%}Q,^&dQ0c*|Q0|+oQ1R+uQ1r,bQ1s,cQ4}0wQ5W1TQ5r1lQ5u1nQ5v1qQ7p5OQ7s5TQ8]5xQ9_7tR9j8YrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR,`&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<f<g[#]WZ#W#Z'U(P!b%hm#h#i#l$y%c%f(Y(d(e(f*V*Z*^+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6Y6kQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+h%z%{Q+l%}Q,V&_Q,Z&aS-d'c'dQ.a(nQ0u+iQ0{+oQ0}+pQ1Q+tQ1f,WS1j,[,]Q2n-eQ4|0wQ5Q0zQ5V1SQ5q1kQ7o5OQ7r5SQ9Z7nR:R9[!O${i$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<m!S%wy!i!u%y%z%{'S'b'c'd'h'r*e+h+i-Q-d-e-l/y0u2g2n2u4dQ+b%uQ+{&XQ,O&YQ,Y&aQ.`(mQ1e,VU1i,Z,[,]Q3V.aQ5l1fS5p1j1kQ8X5q#[<h#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo<i;R;S;V;X;];_;a;i;k;n;r;t;v;x;|W%Ui%W*u<dS&X!Q&fQ&Y!RQ&Z!SR+y&V${%Ti#v$b$c$d$y$|%P%R%]%^%b)v)|*O*Q*S*V*]*c*s*t+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4l4t4w5j6n7]7f8Q8q9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qT)w$v)xV*y%[;Y;ZW'X!e%g*W-WS(y#y#zQ+]%pQ+s&QS.Y(i(jQ1[,PQ4m0`R7x5]'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g$i$_c#Y#e%o%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)X)Z)])c)m+^+r-R-p-u-z-|.k.n.r.t.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4q4z6]6c6h6w6x7R7S7z8h8l8v8|8}9s:T:[:m<ZT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ'V!eR2c-Tv!nQ!e!r!v!y!z'T'[']'i'j'k-T-Z-]-m1a5d5fU*e$}*W*kS/y*f*mQ0S*nQ1^,RQ4d0RR4g0UnqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&v!^Q's!xS(o#u:sQ+f%xQ,T&[Q,U&^Q-b'aQ-o'lS.j(t;eS0f+R;oQ0s+gQ1`,SQ2T,rQ2V,sQ2_-OQ2l-cQ2o-gS4r0g;yQ4x0tS4{0v;zQ6[2aQ6`2mQ6e2tQ7m4yQ8i6^Q8j6aQ8m6fR9p8f$d$^c#Y#e%q%s(O(U(p(u(})O)P)Q)R)S)T)U)V)W)X)Z)])c)m+^+r-R-p-u-z-|.k.n.r.u.v/X0e2]2`2p2w3]3b3c3d3e3f3g3h3i3j3k3l3m3n3q3r3y4q4z6]6c6h6w6x7R7S7z8h8l8v8|8}9s:T:[:m<ZS(k#p'fQ({#zS+[%o.tS.Z(j(lR3O.['OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS#q]:lQ&q!XQ&r!YQ&t![Q&u!]R1{,nQ'^!hQ+_%uQ-`'`S.](m+bQ2j-_W3S.`.a0l0nQ6_2kW6l3P3R3V4vU8p6m6o6qU9u8r8s8uS:^9t9wQ:f:_R:i:gU!wQ']-]T5b1a5d!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,k,p.S1|2P]!pQ!r']-]1a5dT#q]:l%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5a5k5{5|6P6d6r8O8T8d8nS(y#y#zS.Y(i(j!s<Q$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gU$fd)[,eS(l#p'fU*r%S(s3pU0b*x.f6}Q4v0mQ6m3QQ8s6pR9w8tm!tQ!r!v!y!z']'i'j'k-]-m1a5d5fQ'q!uS(b#g1vS-k'h'tQ/k*YQ/w*eQ2v-nQ4U/lS4_/x0SQ7X4PS7d4e4gQ9R7YR9Y7gQ#wbQ'p!uS(a#g1vS(c#m+QQ+S%dQ+d%vQ+j%|U-j'h'q'tQ.O(bQ/j*YQ/v*eQ/|*hQ0r+eQ1g,XS2s-k-nQ2{.WS4T/k/lS4^/w0SQ4a/{Q4c/}Q5n1hQ6g2vQ7W4PQ7[4US7`4_4gQ7e4fQ8V5oS9Q7X7YQ9U7aQ9W7dQ9g8WQ9}9RQ:O9VQ:Q9YQ:Y9hQ:b:PQ<T<OQ<`<XR<a<YV!wQ']-]%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5a5k5{5|6P6d6r8O8T8d8nS#wz!j!r;}$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<T<f%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5a5k5{5|6P6d6r8O8T8d8nQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*e+h+i-Q-d-e-l/y0u2g2n2u4dS%|z!jQ+e%wQ,X&aW1h,Y,Z,[,]U5o1i1j1kS8W5p5qQ9h8X!r<O$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ<X<eR<Y<f%OeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(v(z)z+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5a5k5{5|6P6d6r8O8T8d8nY#bWZ#W#Z(P!b%hm#h#i#l$y%c%f(Y(d(e(f*V*Z*^+T+U+W,g,}-{.R.S.T.V/e/h2U2|2}4Q6Y6kQ,f&l!p<P$[$n)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<S'UU'Y!e%g*WR2e-W%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V,h,k,p-a-i-w-}.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3^5a5k5{5|6P6d8O8T8d8n!r)[$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ,e&lQ0m+aQ3Q._Q6p3UR8t6r!b$Uc#Y%o(O(U(p(u)W)X)])c+r-p-u-z-|.k.n/X0e2p2w3]3n4q4z6c6h6w8l9s:m!P:z)Z)m-R.t2]2`3b3l3m3q3y6]6x7R7S7z8h8v8|8}:T:[<Z!f$Wc#Y%o(O(U(p(u)T)U)W)X)])c+r-p-u-z-|.k.n/X0e2p2w3]3n4q4z6c6h6w8l9s:m!T:|)Z)m-R.t2]2`3b3i3j3l3m3q3y6]6x7R7S7z8h8v8|8}:T:[<Z!^$[c#Y%o(O(U(p(u)])c+r-p-u-z-|.k.n/X0e2p2w3]3n4q4z6c6h6w8l9s:mQ3}/cz<g)Z)m-R.t2]2`3b3q3y6]6x7R7S7z8h8v8|8}:T:[<ZQ<l<nR<m<o'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS$oh$pR3v.|'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$kf$qQ$ifS)f$l)jR)r$qT$jf$qT)h$l)j'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$`$e$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(v(z)o)z+R+V+a,h,k,p,|-P-a-i-w-}._.l.s.|.}/f0a0g0v1d1t1u1w1y1|2P2R2b2r2x3U3^3u5_5a5k5{5|6P6Z6d6r8O8T8d8n9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$oh$pQ$rhR)q$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Y$`$e%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(v(z)z+R+V+a,h,k,p-a-i-w-}._.l.s/f0a0g0v1d1t1u1w1y1|2P2R2r2x3U3^5a5k5{5|6P6d6r8O8T8d8n!s<e$[$n'U)o,|-P.}2b3u5_6Z9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g#elOPXZst!Z!`!o#S#d#o#{$n%k&h&k&l&o&q&r&t&x'Q'_(z)o+V+a,h,k,p-a._.}/f0a1d1t1u1w1y1|2P2R3U3u5a5k5{5|6P6r8O8T8d!O%Si$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<m#[(s#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qQ*}%`Q/Y){o3p;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!O$zi$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<mQ*_${U*h$}*W*kQ+O%aQ/}*i#[<V#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn<W;R;S;V;X;];_;a;i;k;n;r;t;v;x;|Q<[<hQ<]<iQ<^<jR<_<k!O%Si$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<m#[(s#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo3p;R;S;V;X;];_;a;i;k;n;r;t;v;x;|noOXst!Z#d%k&o&q&r&t,k,p1|2PS*b$|*VQ,y&{Q,z&}R4X/p$z%Ti#v$b$c$d$y$|%P%R%]%^%b)v)|*O*Q*S*V*]*c*s*t+`+c+z+}.^.w/]/e/o/p/r0V0X0d1W1Z1c3T3}4Y4b4l4t4w5j6n7]7f8Q8q9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ+|&YQ1Y,OQ5Z1XR7w5[V*j$}*W*kU*j$}*W*kT5c1a5dU/{*g/f5aT4f0T8OQ+d%vQ/|*hQ0r+eQ1g,XQ5n1hQ8V5oQ9g8WR:Y9h!O%Pi$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<mr*O$w)a*P*q+P/n0Z0[3s4V4p7V7h9|<U<b<cS0V*p0W#[;U#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;V;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!^;h(q)_*X*a.b.e.i/U/Z/c/s0k1V1X3Y4W4[5Y5[6s6v7^7b7j7l9T9X:a<n<o`;i3o6y6|7Q8w9x9{:jS;s.d3ZT;t6{8z!O%Ri$d%P%R%]%^%b*O*Q*]*s*t.w/o0V0X0d3}4l9P<d<l<mv*Q$w)a*R*p+P/_/n0Z0[3s4V4h4p7V7h9|<U<b<cS0X*q0Y#[;W#v$b$c$y$|)v)|*S*V*c+`+c+z+}.^/]/e/p/r1W1Z1c3T4Y4b4t4w5j6n7]7f8Q8q9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;X;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!b;j(q)_*X*a.c.d.i/U/Z/c/s0k1V1X3W3Y4W4[5Y5[6s6t6v7^7b7j7l9T9X:a<n<od;k3o6z6{7Q8w8x9x9y9{:jS;u.e3[T;v6|8{rnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ&c!UR,h&lrnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PR&c!UQ,Q&ZR1U+ysnOXst!V!Z#d%k&f&o&q&r&t,k,p1|2PQ1b,VS5i1e1fU8P5g5h5lS9c8R8SS:U9b9eQ:c:VR:h:dQ&j!VR,a&fR5u1nS&O|&TR0}+pQ&o!WR,k&pR,q&uT1},p2PR,u&vQ,t&vR2W,uQ'v!{R-q'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)x$vR/V)xQ#UVR'|#UQ#XWU(S#X(T-xQ(T#YR-x(UQ-U'VR2d-UQ.m(uS3_.m3`R3`.nQ-]']R2h-]Y!rQ']-]1a5dR'g!rQ.x)aR3t.xU#_W%f*VU(Z#_([-yQ([#`R-y(VQ-X'YR2f-Xt`OXst!V!Z#d%k&f&h&o&q&r&t,k,p1|2PS#hZ%cU#r`#h.SR.S(fQ(g#jQ.P(cW.X(g.P2y6iQ2y.QR6i2zQ)j$lR/O)jQ$phR)p$pQ$acU)^$a-t;QQ-t:mR;Q)mQ/i*YW4R/i4S7Z9SU4S/j/k/lS7Z4T4UR9S7[$X)}$w(q)_)a*X*a*p*q*z*{+P.d.e.g.h.i/U/Z/_/a/c/n/s0Z0[0k1V1X3W3X3Y3o3s4V4W4[4h4j4p5Y5[6s6t6u6v6{6|7O7P7Q7V7^7b7h7j7l8w8x8y9T9X9x9y9z9{9|:a:j<U<b<c<n<oQ/q*aU4Z/q4]7_Q4]/sR7_4[S*k$}*WR0P*kr*P$w)a*p*q+P/n0Z0[3s4V4p7V7h9|<U<b<c!^.b(q)_*X*a.d.e.i/U/Z/c/s0k1V1X3Y4W4[5Y5[6s6v7^7b7j7l9T9X:a<n<oU/`*P.b6ya6y3o6{6|7Q8w9x9{:jQ0W*pQ3Z.dU4i0W3Z8zR8z6{v*R$w)a*p*q+P/_/n0Z0[3s4V4h4p7V7h9|<U<b<c!b.c(q)_*X*a.d.e.i/U/Z/c/s0k1V1X3W3Y4W4[5Y5[6s6t6v7^7b7j7l9T9X:a<n<oU/b*R.c6ze6z3o6{6|7Q8w8x9x9y9{:jQ0Y*qQ3[.eU4k0Y3[8{R8{6|Q*v%VR0^*vQ4u0kR7k4uQ+X%iR0j+XQ5^1[S7y5^9aR9a7zQ,S&[R1_,SQ5d1aR7|5dQ1m,^S5s1m8ZR8Z5uQ0x+lW5P0x5R7q9]Q5R0{Q7q5QR9]7rQ+q&OR1O+qQ2P,pR6T2PYrOXst#dQ&s!ZQ+Z%kQ,j&oQ,l&qQ,m&rQ,o&tQ1z,kS1},p2PR6S1|Q%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Y%jQ+f%xQ+x&UQ,`&jQ,w&yW-h'h'p'q'tQ-o'lQ0O*jQ0s+gS1p,a,dQ2X,vQ2Y,yQ2Z,zQ2o-gW2q-j-k-n-pQ4x0tQ5U1RQ5X1VQ5m1gQ5w1rQ6R1{U6b2p2s2vQ6e2tQ7m4yQ7u5WQ7v5YQ7{5cQ8U5nQ8[5vS8k6c6gQ8m6fQ9^7sQ9f8VQ9k8]Q9r8lQ:S9_Q:X9gQ:]9sR:e:YQ%xyQ'a!iQ'l!uU+g%y%z%{Q-O'SU-c'b'c'dS-g'h'rQ/u*eS0t+h+iQ2a-QS2m-d-eQ2t-lQ4`/yQ4y0uQ6^2gQ6a2nQ6f2uR7c4dS$xi<dR*w%WU%Vi%W<dR0]*uQ$wiS(q#v+cS)_$b$cQ)a$dQ*X$yS*a$|*VQ*p%PQ*q%RQ*z%]Q*{%^Q+P%bQ.d;UQ.e;WQ.g;[Q.h;^Q.i;`Q/U)vS/Z)|/]Q/_*OQ/a*QQ/c*SQ/n*]S/s*c/eQ0Z*sQ0[*th0k+`.^1c3T5j6n8Q8q9d9v:W:`Q1V+zQ1X+}Q3W;hQ3X;jQ3Y;mS3o;R;SQ3s.wQ4V/oQ4W/pQ4[/rQ4h0VQ4j0XQ4p0dQ5Y1WQ5[1ZQ6s;qQ6t;sQ6u;uQ6v;wQ6{;VQ6|;XQ7O;]Q7P;_Q7Q;aQ7V3}Q7^4YQ7b4bQ7h4lQ7j4tQ7l4wQ8w;nQ8x;iQ8y;kQ9T7]Q9X7fQ9x;rQ9y;tQ9z;vQ9{;xQ9|9PQ:a;{Q:j;|Q<U<dQ<b<lQ<c<mQ<n<pR<o<qQ*x%[Q.f;YR6};ZnpOXst!Z#d%k&o&q&r&t,k,p1|2PQ!fPS#fZ#oQ&y!`U'e!o5a8OQ'{#SQ(|#{Q)n$nS,d&h&kQ,i&lQ,v&xQ,{'QQ-_'_Q.p(zQ/S)oS0h+V/fQ0n+aQ1x,hQ2k-aQ3R._Q3x.}Q4n0aQ5h1dQ5y1tQ5z1uQ6O1wQ6Q1yQ6V2RQ6q3UQ7T3uQ8S5kQ8`5{Q8a5|Q8c6PQ8u6rQ9e8TR9o8d#YcOPXZst!Z!`!o#d#o#{%k&h&k&l&o&q&r&t&x'Q'_(z+V+a,h,k,p-a._/f0a1d1t1u1w1y1|2P2R3U5a5k5{5|6P6r8O8T8dQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(u#xQ(}$OQ)O$PQ)P$QQ)Q$RQ)R$SQ)S$TQ)T$UQ)U$VQ)V$WQ)W$XQ)X$YQ)Z$[Q)]$`Q)c$eW)m$n)o.}3uQ+^%rQ+r&PS-R'U2bQ-p'oS-u(P-wQ-z(XQ-|(`Q.k(tQ.n(vQ.r:kQ.t:nQ.u:oQ.v:rQ/X)zQ0e+RQ2],|Q2`-PQ2p-iQ2w-}Q3].lQ3b:sQ3c:tQ3d:uQ3e:vQ3f:wQ3g:xQ3h:yQ3i:zQ3j:{Q3k:|Q3l:}Q3m;OQ3n.sQ3q;TQ3r;bQ3y;PQ4q0gQ4z0vQ6];dQ6c2rQ6h2xQ6w3^Q6x;eQ7R;gQ7S;oQ7z5_Q8h6ZQ8l6dQ8v;pQ8|;yQ8};zQ9s8nQ:T9`Q:[9qQ:m#SR<Z<gR#[WR'W!el!tQ!r!v!y!z']'i'j'k-]-m1a5d5fS'S!e-TS-Q'T'[R2g-ZR(w#xQ!fQT-[']-]]!qQ!r']-]1a5dQ#p]R'f:lR)b$dY!uQ']-]1a5dQ'h!rS'r!v!yS't!z5fS-l'i'jQ-n'kR2u-mT#kZ%cS#jZ%cS%im,gU(c#h#i#lS.Q(d(eQ.U(fQ0i+WQ2z.RU2{.S.T.VS6j2|2}R8o6kd#^W#W#Z%f(P(Y*V+T-{/er#gZm#h#i#l%c(d(e(f+W.R.S.T.V2|2}6kS*Y$y*^Q/l*ZQ1v,gQ2^,}Q4P/hQ6X2UQ7Y4QQ8g6YT<R'U+UV#aW%f*VU#`W%f*VS(Q#W(YU(V#Z+T/eS-S'U+UT-v(P-{V'Z!e%g*WQ$lfR)t$qT)i$l)jR3w.|T*[$y*^T*d$|*VQ0l+`Q3P.^Q5g1cQ6o3TQ8R5jQ8r6nQ9b8QQ9t8qQ:V9dQ:_9vQ:d:WR:g:`nqOXst!Z#d%k&o&q&r&t,k,p1|2PQ&i!VR,`&ftmOXst!U!V!Z#d%k&f&o&q&r&t,k,p1|2PR,g&lT%jm,gR1],PR,_&dQ&S|R+w&TR+m%}T&m!W&pT&n!W&pT2O,p2P\",\n  nodeNames: \"⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem\",\n  maxTerm: 376,\n  context: trackNewline,\n  nodeProps: [\n    [\"isolate\", -8,5,6,14,34,36,48,50,52,\"\"],\n    [\"group\", -26,9,17,19,65,204,208,212,213,215,218,221,231,233,239,241,243,245,248,254,260,262,264,266,268,270,271,\"Statement\",-34,13,14,29,32,33,39,48,51,52,54,59,67,69,73,77,79,81,82,107,108,117,118,135,138,140,141,142,143,144,146,147,166,167,169,\"Expression\",-23,28,30,34,38,40,42,171,173,175,176,178,179,180,182,183,184,186,187,188,198,200,202,203,\"Type\",-3,85,100,106,\"ClassItem\"],\n    [\"openedBy\", 23,\"<\",35,\"InterpolationStart\",53,\"[\",57,\"{\",70,\"(\",159,\"JSXStartCloseTag\"],\n    [\"closedBy\", 24,\">\",37,\"InterpolationEnd\",47,\"]\",58,\"}\",71,\")\",164,\"JSXEndTag\"]\n  ],\n  propSources: [jsHighlight],\n  skippedNodes: [0,5,6,274],\n  repeatNodeCount: 37,\n  tokenData: \"$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Rp(U!b'w0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(S#S$h&j'x0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Rp(U!b'x0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!m),Q(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(Q':f$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(U!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(U!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(U!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(U!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Rp(U!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Rp(U!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(U!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(U!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(RpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(RpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Rp(U!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(j%1l(Rp(U!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Rp(U!b$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Rp(U!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Rp(U!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(u+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(T';W$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(RpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(RpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(RpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(RpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!i/.^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!h!Lf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Rp(U!b(P%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Rp(U!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Rp(U!bo+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Rp(U!b}.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Rp(U!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(U!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(U!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(U!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(U!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(U!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(U!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Rp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Rp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Rp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Rp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(RpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(RpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Rp(U!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Rp(U!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Rp(U!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Rp(U!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Rp(U!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Rp(U!b'y0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Rp(U!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(U!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(U!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(RpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(RpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Rp(U!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Rp(U!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Rp(U!bp'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$h&j#})Lv(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#O-<U(Rp(U!b(y7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#p(Ch$e#|$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(m(Ct$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!y$Ip$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!P0,v$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!V#)l$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Rp(U!b([+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Rp(U!b(O,2j$^#t(`$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Rp(U!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X![#Hb(Rp(U!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(t+JY$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z(Kd$?V_!Z(Cds`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!n7`$h&j(Rp(U!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Rp(U!b'w0/l$[#t(O,2j(`$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Rp(U!b'x0/l$[#t(O,2j(`$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr\",\n  tokenizers: [noSemicolon, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup(\"$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOu~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(^~~\", 141, 335), new LocalTokenGroup(\"j~RQYZXz{^~^O'{~~aP!P!Qd~iO'|~~\", 25, 318)],\n  topRules: {\"Script\":[0,7],\"SingleExpression\":[1,272],\"SingleClassItem\":[2,273]},\n  dialects: {jsx: 0, ts: 14769},\n  dynamicPrecedences: {\"77\":1,\"79\":1,\"91\":1,\"167\":1,\"196\":1},\n  specialized: [{term: 322, get: (value) => spec_identifier[value] || -1},{term: 338, get: (value) => spec_word[value] || -1},{term: 92, get: (value) => spec_LessThan[value] || -1}],\n  tokenPrec: 14793\n});\n\nexport { parser };\n","import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        if (this.reducePos < this.pos - 25 /* Lookahead.Margin */)\n            this.setLookAhead(this.pos);\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsing—when looking forward—or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Returns true when there is an unmatched link or image opening\n    /// token before the current position.\n    get hasOpenLink() {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))\n                return true;\n        }\n        return false;\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && cx.hasOpenLink) {\n                        let noBracket = /([^\\[\\]]|\\[[^\\]]*\\])*/.exec(cx.text.slice(pos, end));\n                        end = pos + noBracket[0].length;\n                    }\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n"],"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","this","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","isolate","value","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","get","props","noProps","Object","create","name","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","resolveStack","inner","layers","scan","context","parent","index","mount","root","iterStack","stackIterator","iterate","enter","leave","anon","IncludeAnonymous","c","entered","firstChild","nextSibling","propValues","balance","balanceRange","makeTree","build","data","_a","buffer","nodeSet","maxBufferLength","reused","minRepeatType","FlatBufferCursor","takeNode","parentStart","minPos","inRepeat","depth","start","end","size","lookAheadAtStart","next","startPos","findBufferSize","Uint16Array","skip","endPos","copyToBuffer","TreeBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","takeFlatNode","reverse","make","makeBalanced","nodes","nodeCount","stopAt","j","last","lookAheadProp","lastI","base","pop","pair","concat","maxSize","fork","minStart","nodeSize","localSkipped","nodeStart","bufferStart","startIndex","topID","buildTree","empty","childString","join","endIndex","findChild","dir","pick","checkSide","slice","startI","endI","b","copy","len","Math","max","overlays","IgnoreOverlays","BaseNode","getChild","before","after","r","getChildren","matchContext","matchNodeContext","enterUnfinishedNodesBefore","childBefore","lastChild","prevSibling","_parent","super","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","cur","p","child","externalSibling","heads","picked","newHeads","splice","StackIterator","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","sibling","d","atLastNode","move","prev","cache","mustLeave","some","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","checkRanges","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","sliceBuf","buf","newStack","innerOffset","stackPos","targetI","StructureCursor","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB","space","isAlpha","isDigit","identifiers","ExternalTokenizer","inside","dashes","peek","acceptToken","canShift","descendant","includes","unitToken","cssHighlighting","styleTags","tags","definitionKeyword","keyword","NamespaceName","namespace","KeyframeName","labelName","KeyframeRangeName","operatorKeyword","TagName","tagName","ClassName","className","PseudoClassName","constant","IdName","propertyName","AttributeName","attributeName","NumberLiteral","number","KeywordQuery","UnaryQueryOp","atom","VariableName","variableName","Callee","Unit","unit","definitionOperator","MatchOp","compareOperator","logicOperator","BinOp","arithmeticOperator","Important","modifier","Comment","blockComment","ColorLiteral","color","punctuation","derefOperator","separator","paren","squareBracket","brace","spec_callee","__proto__","lang","url","domain","regexp","selector","spec_AtKeyword","spec_identifier","not","LRParser","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","propSources","skippedNodes","repeatNodeCount","tokenData","tokenizers","LocalTokenGroup","topRules","specialized","term","tokenPrec","nextTagID","Tag","modified","tag","t","defineModifier","mod","Modifier","sort","nextModifierID","instances","mods","exists","every","x","configs","array","sets","powerSet","byName","part","pieces","rest","exec","rule","Rule","ruleNodeProp","opaque","inherit","other","tagHighlighter","options","style","class","all","cls","sub","tagClass","highlightTree","highlighter","putStyle","builder","HighlightBuilder","highlightRange","highlighters","flush","at","span","startSpan","inheritedClass","filter","h","getStyleTags","tagCls","highlightTags","innerHighlighters","rangeFrom","rangeTo","comment","typeName","literal","content","heading","operator","bracket","meta","lineComment","docComment","macroName","docString","character","attributeValue","integer","float","bool","escape","self","null","controlKeyword","moduleKeyword","bitwiseOperator","updateOperator","typeOperator","controlOperator","angleBracket","heading1","heading2","heading3","heading4","heading5","heading6","contentSeparator","list","quote","emphasis","strong","link","monospace","strikethrough","inserted","deleted","changed","invalid","documentMeta","annotation","processingInstruction","definition","function","standard","local","special","Element","Attribute","AttributeValue","UnquotedAttributeValue","ScriptText","StyleText","TextareaText","CloseTag","selfClosers","area","br","col","command","embed","frame","hr","img","keygen","param","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","rp","rt","tbody","td","tfoot","th","tr","closeOnOpen","dt","address","article","aside","blockquote","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","isSpace","cachedName","cachedInput","cachedPos","tagNameAfter","String","fromCharCode","toLowerCase","question","bang","ElementContext","startTagTerms","elementContext","ContextTracker","shift","reduce","reuse","strict","tagStart","close","dialectEnabled","cx","hasOwnProperty","contextual","commentContent","endTag","selfClosing","inForeignElement","contentTokenizer","textToken","endToken","lastState","state","matchedLen","charCodeAt","scriptTokens","styleTokens","textareaTokens","htmlHighlighting","Is","ProcessingInst","DoctypeDecl","dialects","noMatch","getAttrs","openTag","attrs","att","findTagName","tagNameNode","maybeNest","configureNesting","attributes","script","textarea","attr","nameNode","matches","trackNewline","insertSemicolon","fallback","noSemicolon","operatorToken","mayPostfix","identifierChar","jsx","back","jsHighlight","TemplateString","BooleanLiteral","Star","VariableDefinition","Label","PropertyName","PrivatePropertyName","PropertyDefinition","PrivatePropertyDefinition","UpdateOp","BlockComment","Number","Escape","ArithOp","LogicOp","BitOp","CompareOp","RegExp","Equals","Arrow","TypeName","TypeDefinition","JSXAttributeValue","JSXText","export","as","default","async","extends","true","false","void","typeof","new","delete","await","public","private","protected","readonly","instanceof","satisfies","in","const","import","keyof","unique","infer","abstract","implements","let","var","using","interface","enum","module","declare","global","for","of","while","with","do","if","else","switch","case","try","catch","finally","return","throw","break","continue","debugger","spec_word","static","override","accessor","spec_LessThan","ts","dynamicPrecedences","Stack","reducePos","score","bufferBase","curContext","_","StackContext","pushState","action","setLookAhead","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","isReduce","nextState","maxNode","shiftContext","apply","nextStart","nextEnd","useNode","updateContext","tracker","stream","reset","recoverByDelete","isNode","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","v","forceReduce","validAction","backup","findForcedReduction","seen","explore","allActions","rDepth","forceAll","deadEnd","restart","sameState","dialectID","dialect","emitContext","hash","emitLookAhead","newCx","StackBufferCursor","maybeNext","decodeArray","Type","out","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","readNext","resolveOffset","assoc","clipPos","idx","resolved","endOffset","acceptTokenTo","getChunk","nextChunk","setDone","TokenGroup","readToken","tokenPrecTable","prototype","precTable","elseToken","atEof","precOffset","groupMask","accEnd","allows","overrides","low","high","mid","findOffset","tableData","tableOffset","iPrev","verbose","process","LOG","stackIDs","cutAt","fragment","safeFrom","safeTo","trees","nextFragment","fr","nodeAt","TokenCache","tokens","mainToken","actions","getActions","actionIndex","main","tokenizer","updateCachedToken","addActions","eofTerm","getMainToken","specializers","putAction","Parse","recovering","nextStackID","minStackPos","topTerm","stacks","bufferLength","stopped","stoppedTokens","newStacks","advanceStack","tok","finished","findFinished","console","log","stackID","stackToTree","getName","SyntaxError","runRecovery","maxRemaining","strictCx","cxHash","cached","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","insert","fromCodePoint","Dialect","disabled","wrappers","topTerms","keys","setProp","nodeID","propSpec","tokenArray","specializerSpecs","getSpecializer","Uint32Array","termNames","parseDialect","w","loose","groupTag","terminal","slot","flag","deflt","configure","info","external","contextTracker","wrap","hasWrappers","prec","values","Uint8Array","CompositeBlock","parentHash","hashProp","addChild","LeafBlock","marks","parsers","Line","text","baseIndent","basePos","markers","indent","forward","forwardInner","newPos","skipSpace","countIndent","moveBase","moveBaseColumn","findColumn","addMarker","elt","goal","scrub","skipForList","bl","line","block","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","ListItem","_cx","Document","skipSpaceBack","isFencedCode","isBlockquote","breaking","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","IndentedCode","pendingMarks","nextLine","codeStart","addNode","writeElements","finish","CodeBlock","FencedCode","fenceEnd","infoFrom","infoTo","CodeMark","CodeInfo","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","endOfSpace","write","HeaderMark","parseInline","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","DefaultEndLeaf","scanLineResult","BlockContext","atEnd","reusePlaceholders","rangeI","absoluteLineStart","absoluteLineEnd","readLine","markI","mark","finishContext","reuseFragment","blockParsers","leafBlockParsers","lines","endLeafBlock","finishLeaf","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","eol","startComposite","getNodeType","addElement","injectMarks","addGaps","injectGaps","inline","Paragraph","TreeElement","Buffer","dummies","rangeEnd","movePastNext","upto","inclusive","MarkdownParser","blockNames","inlineParsers","inlineNames","nodeTypes","resolveConfig","nonEmpty","defineNodes","styles","composite","remove","rm","parseBlock","findName","endLeaf","InlineContext","char","resolveMarkers","conf","conc","wrapA","wrapB","names","writeTo","startOff","EmphasisUnderscore","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","Escapable","Punctuation","DefaultInline","escaped","append","Entity","InlineCode","curSize","HTMLTag","Autolink","URL","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","takeContent","finishLink","dest","label","LinkTitle","requireNonWS","LinkLabel","addDelimiter","hasOpenLink","emp","closeSize","k","element","findOpeningDelimiter","elements","eI","NotLast","fragmentEnd","fragEnd","blockI","prevEnd","prevI","dummy","abs","markdownHighlighting","leftOverSpace","parseCode","codeParser","htmlParser","infoNode","StrikethroughDelim","Strikethrough","parseRow","cellStart","cellEnd","esc","parseCell","hasPipe","delimiterLine","TableParser","rows","lineText","firstRow","Table","TaskParser","TaskList","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkEmailEnd","lastIndex","GFM","absPos","autolinkURLEnd","parseSubSuper","Superscript","Subscript","Emoji"],"sourceRoot":""}