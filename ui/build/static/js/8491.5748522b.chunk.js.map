{"version":3,"file":"static/js/8491.5748522b.chunk.js","mappings":"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","sources":["pages/Admin/Smtp/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport type * as Type from '@/common/interface';\nimport { useToast } from '@/hooks';\nimport { useSmtpSetting, updateSmtpSetting } from '@/services';\nimport pattern from '@/common/pattern';\nimport { SchemaForm, JSONSchema, UISchema, initFormData } from '@/components';\nimport { handleFormError, scrollToElementTop } from '@/utils';\n\nconst Smtp: FC = () => {\n  const { t } = useTranslation('translation', {\n    keyPrefix: 'admin.smtp',\n  });\n  const Toast = useToast();\n  const { data: setting } = useSmtpSetting();\n  const schema: JSONSchema = {\n    title: t('page_title'),\n    properties: {\n      from_email: {\n        type: 'string',\n        title: t('from_email.label'),\n        description: t('from_email.text'),\n      },\n      from_name: {\n        type: 'string',\n        title: t('from_name.label'),\n        description: t('from_name.text'),\n      },\n      smtp_host: {\n        type: 'string',\n        title: t('smtp_host.label'),\n        description: t('smtp_host.text'),\n      },\n      encryption: {\n        type: 'string',\n        title: t('encryption.label'),\n        description: t('encryption.text'),\n        enum: ['SSL', ''],\n        enumNames: ['SSL', 'None'],\n      },\n      smtp_port: {\n        type: 'string',\n        title: t('smtp_port.label'),\n        description: t('smtp_port.text'),\n      },\n      smtp_authentication: {\n        type: 'boolean',\n        title: t('smtp_authentication.title'),\n        enum: [true, false],\n        enumNames: [t('smtp_authentication.yes'), t('smtp_authentication.no')],\n      },\n      smtp_username: {\n        type: 'string',\n        title: t('smtp_username.label'),\n      },\n      smtp_password: {\n        type: 'string',\n        title: t('smtp_password.label'),\n      },\n      test_email_recipient: {\n        type: 'string',\n        title: t('test_email_recipient.label'),\n        description: t('test_email_recipient.text'),\n      },\n    },\n  };\n  const uiSchema: UISchema = {\n    from_email: {\n      'ui:options': {\n        inputType: 'email',\n      },\n    },\n    encryption: {\n      'ui:widget': 'select',\n    },\n    smtp_username: {\n      'ui:options': {\n        validator: (value: string, formData) => {\n          if (formData.smtp_authentication.value) {\n            if (!value) {\n              return t('smtp_username.msg');\n            }\n          }\n          return true;\n        },\n      },\n    },\n    smtp_password: {\n      'ui:options': {\n        inputType: 'password',\n        validator: (value: string, formData) => {\n          if (formData.smtp_authentication.value) {\n            if (!value) {\n              return t('smtp_password.msg');\n            }\n          }\n          return true;\n        },\n      },\n    },\n    smtp_authentication: {\n      'ui:widget': 'switch',\n      'ui:options': {\n        label: t('smtp_authentication.label'),\n      },\n    },\n    smtp_port: {\n      'ui:options': {\n        inputType: 'number',\n        validator: (value) => {\n          if (!/^[1-9][0-9]*$/.test(value) || Number(value) > 65535) {\n            return t('smtp_port.msg');\n          }\n          return true;\n        },\n      },\n    },\n    test_email_recipient: {\n      'ui:options': {\n        inputType: 'email',\n        validator: (value) => {\n          if (value && !pattern.email.test(value)) {\n            return t('test_email_recipient.msg');\n          }\n          return true;\n        },\n      },\n    },\n  };\n  const [formData, setFormData] = useState<Type.FormDataType>(\n    initFormData(schema),\n  );\n\n  const onSubmit = (evt) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    const reqParams: Type.AdminSettingsSmtp = {\n      from_email: formData.from_email.value,\n      from_name: formData.from_name.value,\n      smtp_host: formData.smtp_host.value,\n      encryption: formData.encryption.value,\n      smtp_port: Number(formData.smtp_port.value),\n      smtp_authentication: formData.smtp_authentication.value,\n      ...(formData.smtp_authentication.value\n        ? { smtp_username: formData.smtp_username.value }\n        : {}),\n      ...(formData.smtp_authentication.value\n        ? { smtp_password: formData.smtp_password.value }\n        : {}),\n      test_email_recipient: formData.test_email_recipient.value,\n    };\n\n    updateSmtpSetting(reqParams)\n      .then(() => {\n        Toast.onShow({\n          msg: t('update', { keyPrefix: 'toast' }),\n          variant: 'success',\n        });\n      })\n      .catch((err) => {\n        if (err.isError) {\n          const data = handleFormError(err, formData);\n          setFormData({ ...data });\n          const ele = document.getElementById(err.list[0].error_field);\n          scrollToElementTop(ele);\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (!setting) {\n      return;\n    }\n    const formMeta = {};\n    Object.keys(setting).forEach((k) => {\n      formMeta[k] = { ...formData[k], value: setting[k] };\n    });\n    setFormData({ ...formData, ...formMeta });\n  }, [setting]);\n\n  useEffect(() => {\n    if (!/true|false/.test(formData.smtp_authentication.value)) {\n      return;\n    }\n    if (formData.smtp_authentication.value) {\n      setFormData({\n        ...formData,\n        smtp_username: { ...formData.smtp_username, hidden: false },\n        smtp_password: { ...formData.smtp_password, hidden: false },\n      });\n    } else {\n      setFormData({\n        ...formData,\n        smtp_username: { ...formData.smtp_username, hidden: true },\n        smtp_password: { ...formData.smtp_password, hidden: true },\n      });\n    }\n  }, [formData.smtp_authentication.value]);\n\n  const handleOnChange = (data) => {\n    setFormData(data);\n  };\n  return (\n    <>\n      <h3 className=\"mb-4\">{t('page_title')}</h3>\n      <SchemaForm\n        schema={schema}\n        uiSchema={uiSchema}\n        formData={formData}\n        onChange={handleOnChange}\n        onSubmit={onSubmit}\n      />\n    </>\n  );\n};\n\nexport default Smtp;\n"],"names":["Smtp","t","useTranslation","keyPrefix","Toast","useToast","data","setting","useSmtpSetting","schema","title","properties","from_email","type","description","from_name","smtp_host","encryption","enum","enumNames","smtp_port","smtp_authentication","smtp_username","smtp_password","test_email_recipient","uiSchema","inputType","validator","value","formData","label","test","Number","pattern","email","setFormData","useState","initFormData","useEffect","formMeta","Object","keys","forEach","k","hidden","_jsxs","_Fragment","children","_jsx","className","SchemaForm","onChange","onSubmit","evt","preventDefault","stopPropagation","reqParams","updateSmtpSetting","then","onShow","msg","variant","catch","err","isError","handleFormError","ele","document","getElementById","list","error_field","scrollToElementTop"],"sourceRoot":""}