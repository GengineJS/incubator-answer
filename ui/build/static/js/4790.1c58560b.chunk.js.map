{"version":3,"file":"static/js/4790.1c58560b.chunk.js","mappings":"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","sources":["pages/Review/components/EditPostModal/index.tsx","webpack://answer-static/./src/pages/Review/components/EditPostModal/index.scss?1b05"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { FC, useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nimport classNames from 'classnames';\n\nimport { putFlagReviewAction } from '@/services';\nimport { usePageUsers } from '@/hooks';\nimport { useCaptchaPlugin } from '@/utils/pluginKit';\nimport { Editor, TagSelector, Mentions, TextArea } from '@/components';\nimport {\n  // matchedUsers,\n  parseUserInfo,\n  handleFormError,\n  parseEditMentionUser,\n  scrollToElementTop,\n} from '@/utils';\nimport type * as Type from '@/common/interface';\n\nimport './index.scss';\n\ninterface Props {\n  originalData: {\n    id: string;\n    flag_id: string;\n    question_id?: string;\n    answer_id?: string;\n    title: string;\n    content: string;\n    tags: Type.Tag[];\n  };\n  objectType: Type.FlagReviewItem['object_type'] | '';\n  visible: boolean;\n  handleClose: () => void;\n  callback?: () => void;\n}\n\ninterface FormDataItem {\n  title: Type.FormValue<string>;\n  tags: Type.FormValue<Type.Tag[]>;\n  content: Type.FormValue<string>;\n}\n\nconst initFormData = {\n  title: {\n    value: '',\n    isInvalid: false,\n    errorMsg: '',\n  },\n  tags: {\n    value: [],\n    isInvalid: false,\n    errorMsg: '',\n  },\n  content: {\n    value: '',\n    isInvalid: false,\n    errorMsg: '',\n  },\n};\n\nconst Index: FC<Props> = ({\n  originalData,\n  visible = false,\n  objectType,\n  handleClose,\n  callback,\n}) => {\n  const { t } = useTranslation('translation', { keyPrefix: 'ask' });\n  const [formData, setFormData] = useState<FormDataItem>(initFormData);\n  const [focusEditor, setFocusEditor] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const pageUsers = usePageUsers();\n\n  const editCaptcha = useCaptchaPlugin('edit');\n\n  const onClose = (bol) => {\n    if (bol) {\n      callback?.();\n    }\n    setFormData(initFormData);\n    handleClose();\n    setLoaded(false);\n  };\n\n  const handleInput = (data: Partial<FormDataItem>) => {\n    if (!loaded) {\n      return;\n    }\n    setFormData({\n      ...formData,\n      ...data,\n    });\n  };\n\n  const checkValidated = (): boolean => {\n    let bol = true;\n    const { title, tags, content } = formData;\n    if (objectType === 'question') {\n      if (!title.value) {\n        bol = false;\n        formData.title = {\n          value: title.value,\n          isInvalid: true,\n          errorMsg: t('form.fields.title.msg.empty', {\n            keyPrefix: 'ask',\n          }),\n        };\n      }\n\n      if (!tags.value.length) {\n        bol = false;\n        formData.tags = {\n          value: tags.value,\n          isInvalid: true,\n          errorMsg: t('form.fields.tags.msg.empty', {\n            keyPrefix: 'ask',\n          }),\n        };\n      }\n    }\n\n    if (!content.value || Array.from(content.value.trim()).length < 6) {\n      bol = false;\n      formData.content = {\n        value: content.value,\n        isInvalid: true,\n        errorMsg: t('form.fields.answer.feedback.characters', {\n          keyPrefix: 'edit_answer',\n        }),\n      };\n    } else {\n      formData.content = {\n        value: content.value,\n        isInvalid: false,\n        errorMsg: '',\n      };\n    }\n\n    setFormData({\n      ...formData,\n    });\n\n    if (!bol) {\n      const errObj = Object.keys(formData).filter(\n        (key) => formData[key].isInvalid,\n      );\n      const ele = document.getElementById(errObj[0]);\n      scrollToElementTop(ele);\n    }\n\n    return bol;\n  };\n\n  const submitFlagReviewAction = () => {\n    const params: Type.PutFlagReviewParams = {\n      title: formData.title.value,\n      content: formData.content.value,\n      tags: formData.tags.value,\n      operation_type: 'edit_post',\n      flag_id: originalData.flag_id,\n    };\n    if (objectType === 'answer') {\n      delete params.title;\n      delete params.tags;\n    }\n    if (objectType === 'comment') {\n      const { value } = formData.content;\n      // const users = matchedUsers(value);\n      // const userNames = unionBy(users.map((user) => user.userName));\n      const commentMarkDown = parseUserInfo(value);\n\n      // params.mention_username_list = userNames;\n      params.content = commentMarkDown;\n\n      delete params.title;\n      delete params.tags;\n    }\n    if (objectType === 'question') {\n      const imgCode = editCaptcha?.getCaptcha();\n      if (imgCode?.verify) {\n        params.captcha_code = imgCode.captcha_code;\n        params.captcha_id = imgCode.captcha_id;\n      }\n    }\n    putFlagReviewAction(params)\n      .then(async () => {\n        await editCaptcha?.close();\n        onClose(true);\n      })\n      .catch((err) => {\n        if (err.isError) {\n          editCaptcha?.handleCaptchaError(err.list);\n          const data = handleFormError(err, formData);\n          setFormData({ ...data });\n\n          const ele = document.getElementById(err.list[0].error_field);\n          scrollToElementTop(ele);\n        }\n      });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!checkValidated()) {\n      return;\n    }\n\n    if (!editCaptcha) {\n      submitFlagReviewAction();\n      return;\n    }\n\n    editCaptcha.check(() => submitFlagReviewAction());\n  };\n\n  const handleSelected = (val) => {\n    if (!loaded) {\n      return;\n    }\n    setFormData({\n      ...formData,\n      content: {\n        value: val,\n        errorMsg: '',\n        isInvalid: false,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n\n    formData.title.value = originalData.title;\n    formData.content.value = originalData.content;\n    formData.tags.value = originalData.tags.map((item) => {\n      return {\n        ...item,\n        parsed_text: '',\n        original_text: '',\n      };\n    });\n    setFormData({ ...formData });\n    setLoaded(true);\n  }, [visible]);\n\n  return (\n    <Modal\n      show={visible}\n      onHide={() => onClose(false)}\n      className=\"w-100\"\n      dialogClassName=\"edit-post-modal\">\n      <Modal.Header closeButton>\n        <Modal.Title>\n          {t('edit_post', { keyPrefix: 'page_review' })}\n        </Modal.Title>\n      </Modal.Header>\n      <Form noValidate onSubmit={handleSubmit}>\n        <Modal.Body>\n          {objectType === 'question' && (\n            <Form.Group controlId=\"title\" className=\"mb-3\">\n              <Form.Label>{t('form.fields.title.label')}</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={formData.title.value}\n                isInvalid={formData.title.isInvalid}\n                onChange={(e) => {\n                  handleInput({\n                    title: {\n                      value: e.target.value,\n                      isInvalid: false,\n                      errorMsg: '',\n                    },\n                  });\n                }}\n                placeholder={t('form.fields.title.placeholder')}\n                autoFocus\n                contentEditable\n              />\n\n              <Form.Control.Feedback type=\"invalid\">\n                {formData.title.errorMsg}\n              </Form.Control.Feedback>\n            </Form.Group>\n          )}\n\n          {objectType !== 'comment' && (\n            <Form.Group controlId=\"body\">\n              <Form.Label>\n                {objectType === 'question'\n                  ? t('form.fields.body.label')\n                  : t('form.fields.answer.label')}\n              </Form.Label>\n              <Form.Control\n                defaultValue={formData.content.value}\n                isInvalid={formData.content.isInvalid}\n                hidden\n              />\n              <Editor\n                value={formData.content.value}\n                onChange={(value) => {\n                  handleInput({\n                    content: { value, errorMsg: '', isInvalid: false },\n                  });\n                }}\n                className={classNames(\n                  'form-control p-0',\n                  focusEditor ? 'focus' : '',\n                )}\n                onFocus={() => {\n                  setFocusEditor(true);\n                }}\n                onBlur={() => {\n                  setFocusEditor(false);\n                }}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formData.content.errorMsg}\n              </Form.Control.Feedback>\n            </Form.Group>\n          )}\n\n          {objectType === 'question' && (\n            <Form.Group controlId=\"tags\" className=\"my-3\">\n              <Form.Label>{t('form.fields.tags.label')}</Form.Label>\n              <Form.Control\n                defaultValue={JSON.stringify(formData.tags.value)}\n                isInvalid={formData.tags.isInvalid}\n                hidden\n              />\n              <TagSelector\n                value={formData.tags.value}\n                onChange={(value) => {\n                  handleInput({\n                    tags: { value, errorMsg: '', isInvalid: false },\n                  });\n                }}\n                showRequiredTag\n                maxTagLength={5}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formData.tags.errorMsg}\n              </Form.Control.Feedback>\n            </Form.Group>\n          )}\n\n          {objectType === 'comment' && (\n            <div className=\"w-100\">\n              <div\n                className={classNames('custom-form-control', {\n                  'is-invalid': formData.content.isInvalid,\n                })}>\n                <Form.Label>Comment</Form.Label>\n                <Mentions\n                  pageUsers={pageUsers.getUsers()}\n                  onSelected={handleSelected}>\n                  <TextArea\n                    size=\"sm\"\n                    rows={4}\n                    value={parseEditMentionUser(formData.content.value)}\n                    onChange={(e) => {\n                      handleInput({\n                        content: {\n                          value: e.target.value,\n                          errorMsg: '',\n                          isInvalid: false,\n                        },\n                      });\n                    }}\n                  />\n                </Mentions>\n              </div>\n              <Form.Control.Feedback type=\"invalid\">\n                {formData.content.errorMsg}\n              </Form.Control.Feedback>\n            </div>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => onClose(false)}>\n            {t('close', { keyPrefix: 'btns' })}\n          </Button>\n          <Button variant=\"primary\" type=\"submit\">\n            {t('submit', { keyPrefix: 'btns' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default Index;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["initFormData","title","value","isInvalid","errorMsg","tags","content","Index","originalData","visible","objectType","handleClose","callback","t","useTranslation","keyPrefix","formData","setFormData","useState","focusEditor","setFocusEditor","loaded","setLoaded","pageUsers","usePageUsers","editCaptcha","useCaptchaPlugin","onClose","bol","handleInput","data","submitFlagReviewAction","params","operation_type","flag_id","commentMarkDown","parseUserInfo","imgCode","getCaptcha","verify","captcha_code","captcha_id","putFlagReviewAction","then","async","close","catch","err","isError","handleCaptchaError","list","handleFormError","ele","document","getElementById","error_field","scrollToElementTop","useEffect","map","item","parsed_text","original_text","_jsxs","Modal","show","onHide","className","dialogClassName","children","_jsx","Header","closeButton","Title","Form","noValidate","onSubmit","event","preventDefault","stopPropagation","checkValidated","length","Array","from","trim","errObj","Object","keys","filter","key","check","Body","Group","controlId","Label","Control","type","onChange","e","target","placeholder","autoFocus","contentEditable","Feedback","defaultValue","hidden","Editor","classNames","onFocus","onBlur","JSON","stringify","TagSelector","showRequiredTag","maxTagLength","Mentions","getUsers","onSelected","val","TextArea","size","rows","parseEditMentionUser","Footer","Button","variant","onClick"],"sourceRoot":""}