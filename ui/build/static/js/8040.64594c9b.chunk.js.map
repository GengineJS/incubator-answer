{"version":3,"file":"static/js/8040.64594c9b.chunk.js","mappings":"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","sources":["pages/Users/Settings/Account/components/ModifyPass/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, FormEvent, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\n\nimport classname from 'classnames';\n\nimport { useToast } from '@/hooks';\nimport { useCaptchaPlugin } from '@/utils/pluginKit';\nimport type { FormDataType } from '@/common/interface';\nimport { modifyPassword } from '@/services';\nimport { handleFormError, scrollToElementTop } from '@/utils';\nimport { loggedUserInfoStore } from '@/stores';\n\nconst Index: FC = () => {\n  const { t } = useTranslation('translation', {\n    keyPrefix: 'settings.account',\n  });\n  const { user } = loggedUserInfoStore();\n  const [showForm, setFormState] = useState(false);\n  const toast = useToast();\n  const [formData, setFormData] = useState<FormDataType>({\n    old_pass: {\n      value: '',\n      isInvalid: false,\n      errorMsg: '',\n    },\n    pass: {\n      value: '',\n      isInvalid: false,\n      errorMsg: '',\n    },\n    pass2: {\n      value: '',\n      isInvalid: false,\n      errorMsg: '',\n    },\n  });\n\n  const infoCaptcha = useCaptchaPlugin('edit_userinfo');\n\n  const handleFormState = () => {\n    setFormState((pre) => !pre);\n  };\n\n  const handleChange = (params: FormDataType) => {\n    setFormData({ ...formData, ...params });\n  };\n\n  const checkValidated = (): boolean => {\n    let bol = true;\n    const { old_pass, pass, pass2 } = formData;\n    if (!old_pass.value && user.have_password) {\n      bol = false;\n      formData.old_pass = {\n        value: '',\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.empty'),\n      };\n    }\n\n    if (!pass.value) {\n      bol = false;\n      formData.pass = {\n        value: '',\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.empty'),\n      };\n    }\n\n    if (bol && pass.value && pass.value.length < 8) {\n      bol = false;\n      formData.pass = {\n        value: pass.value,\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.length'),\n      };\n    }\n\n    if (!pass2.value) {\n      bol = false;\n      formData.pass2 = {\n        value: '',\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.empty'),\n      };\n    }\n\n    if (bol && pass2.value && pass2.value.length < 8) {\n      bol = false;\n      formData.pass2 = {\n        value: pass2.value,\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.length'),\n      };\n    }\n    if (bol && pass.value && pass2.value && pass.value !== pass2.value) {\n      bol = false;\n      formData.pass2 = {\n        value: pass2.value,\n        isInvalid: true,\n        errorMsg: t('current_pass.msg.different'),\n      };\n    }\n    setFormData({\n      ...formData,\n    });\n    if (!bol) {\n      const errObj = Object.keys(formData).filter(\n        (key) => formData[key].isInvalid,\n      );\n      const ele = document.getElementById(errObj[0]);\n      scrollToElementTop(ele);\n    }\n\n    return bol;\n  };\n\n  const postModifyPass = (event?: any) => {\n    if (event) {\n      event.preventDefault();\n    }\n    const params: any = {\n      old_pass: formData.old_pass.value,\n      pass: formData.pass.value,\n    };\n\n    const imgCode = infoCaptcha?.getCaptcha();\n    if (imgCode?.verify) {\n      params.captcha_code = imgCode.captcha_code;\n      params.captcha_id = imgCode.captcha_id;\n    }\n    modifyPassword(params)\n      .then(async () => {\n        await infoCaptcha?.close();\n        toast.onShow({\n          msg: t('update_password', { keyPrefix: 'toast' }),\n          variant: 'success',\n        });\n        handleFormState();\n      })\n      .catch((err) => {\n        if (err.isError) {\n          infoCaptcha?.handleCaptchaError(err.list);\n          const data = handleFormError(err, formData);\n          setFormData({ ...data });\n          const ele = document.getElementById(err.list[0].error_field);\n          scrollToElementTop(ele);\n        }\n      });\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (!checkValidated()) {\n      return;\n    }\n    if (!infoCaptcha) {\n      postModifyPass();\n      return;\n    }\n\n    infoCaptcha.check(() => {\n      postModifyPass();\n    });\n  };\n\n  return (\n    <div className=\"mt-5\">\n      {showForm ? (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Form.Group\n            controlId=\"old_pass\"\n            className={classname('mb-3', user.have_password ? '' : 'd-none')}>\n            <Form.Label>{t('current_pass.label')}</Form.Label>\n            <Form.Control\n              autoComplete=\"off\"\n              required\n              type=\"password\"\n              placeholder=\"\"\n              isInvalid={formData.old_pass.isInvalid}\n              onChange={(e) =>\n                handleChange({\n                  old_pass: {\n                    value: e.target.value,\n                    isInvalid: false,\n                    errorMsg: '',\n                  },\n                })\n              }\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formData.old_pass.errorMsg}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"new_pass\" className=\"mb-3\">\n            <Form.Label>{t('new_pass.label')}</Form.Label>\n            <Form.Control\n              autoComplete=\"off\"\n              required\n              type=\"password\"\n              isInvalid={formData.pass.isInvalid}\n              onChange={(e) =>\n                handleChange({\n                  pass: {\n                    value: e.target.value,\n                    isInvalid: false,\n                    errorMsg: '',\n                  },\n                })\n              }\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formData.pass.errorMsg}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"pass2\" className=\"mb-3\">\n            <Form.Label>{t('pass_confirm.label')}</Form.Label>\n            <Form.Control\n              autoComplete=\"off\"\n              required\n              type=\"password\"\n              isInvalid={formData.pass2.isInvalid}\n              onChange={(e) =>\n                handleChange({\n                  pass2: {\n                    value: e.target.value,\n                    isInvalid: false,\n                    errorMsg: '',\n                  },\n                })\n              }\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formData.pass2.errorMsg}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <div>\n            <Button type=\"submit\" variant=\"primary\" className=\"me-2\">\n              {t('save', { keyPrefix: 'btns' })}\n            </Button>\n\n            <Button variant=\"link\" onClick={() => handleFormState()}>\n              {t('cancel', { keyPrefix: 'btns' })}\n            </Button>\n          </div>\n        </Form>\n      ) : (\n        <>\n          <Form.Label>{t('password_title')}</Form.Label>\n          <br />\n          <Button\n            variant=\"outline-secondary\"\n            type=\"submit\"\n            onClick={() => {\n              handleFormState();\n            }}>\n            {t('change_pass_btn')}\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(Index);\n"],"names":["Index","t","useTranslation","keyPrefix","user","loggedUserInfoStore","showForm","setFormState","useState","toast","useToast","formData","setFormData","old_pass","value","isInvalid","errorMsg","pass","pass2","infoCaptcha","useCaptchaPlugin","handleFormState","pre","handleChange","params","postModifyPass","event","preventDefault","imgCode","getCaptcha","verify","captcha_code","captcha_id","modifyPassword","then","async","close","onShow","msg","variant","catch","err","isError","handleCaptchaError","list","data","handleFormError","ele","document","getElementById","error_field","scrollToElementTop","_jsx","className","children","_jsxs","Form","noValidate","onSubmit","stopPropagation","checkValidated","bol","have_password","length","errObj","Object","keys","filter","key","check","Group","controlId","classname","Label","Control","autoComplete","required","type","placeholder","onChange","e","target","Feedback","Button","onClick","_Fragment","React"],"sourceRoot":""}