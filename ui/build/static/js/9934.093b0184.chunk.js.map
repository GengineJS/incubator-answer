{"version":3,"file":"static/js/9934.093b0184.chunk.js","mappings":"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","sources":["pages/Admin/Login/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { FC, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport type * as Type from '@/common/interface';\nimport { getLoginSetting, putLoginSetting } from '@/services';\nimport { SchemaForm, JSONSchema, initFormData, UISchema } from '@/components';\nimport { useToast } from '@/hooks';\nimport { handleFormError, scrollToElementTop } from '@/utils';\nimport { loginSettingStore } from '@/stores';\n\nconst Index: FC = () => {\n  const { t } = useTranslation('translation', {\n    keyPrefix: 'admin.login',\n  });\n  const Toast = useToast();\n  const schema: JSONSchema = {\n    title: t('page_title'),\n    properties: {\n      allow_new_registrations: {\n        type: 'boolean',\n        title: t('membership.title'),\n        description: t('membership.text'),\n        default: true,\n      },\n      allow_email_registrations: {\n        type: 'boolean',\n        title: t('email_registration.title'),\n        description: t('email_registration.text'),\n        default: true,\n      },\n      allow_password_login: {\n        type: 'boolean',\n        title: t('password_login.title'),\n        description: t('password_login.text'),\n        default: true,\n      },\n      allow_email_domains: {\n        type: 'string',\n        title: t('allowed_email_domains.title'),\n        description: t('allowed_email_domains.text'),\n      },\n      login_required: {\n        type: 'boolean',\n        title: t('private.title'),\n        description: t('private.text'),\n        default: false,\n      },\n    },\n  };\n  const uiSchema: UISchema = {\n    allow_new_registrations: {\n      'ui:widget': 'switch',\n      'ui:options': {\n        label: t('membership.label'),\n      },\n    },\n    allow_email_registrations: {\n      'ui:widget': 'switch',\n      'ui:options': {\n        label: t('email_registration.label'),\n      },\n    },\n    allow_password_login: {\n      'ui:widget': 'switch',\n      'ui:options': {\n        label: t('password_login.label'),\n      },\n    },\n    allow_email_domains: {\n      'ui:widget': 'textarea',\n    },\n    login_required: {\n      'ui:widget': 'switch',\n      'ui:options': {\n        label: t('private.label'),\n      },\n    },\n  };\n  const [formData, setFormData] = useState(initFormData(schema));\n  const { update: updateLoginSetting } = loginSettingStore((_) => _);\n\n  const onSubmit = (evt) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    const allowedEmailDomains: string[] = [];\n    if (formData.allow_email_domains.value) {\n      const domainList = formData.allow_email_domains.value.split('\\n');\n      domainList.forEach((li) => {\n        li = li.trim();\n        if (li) {\n          allowedEmailDomains.push(li);\n        }\n      });\n    }\n    const reqParams: Type.AdminSettingsLogin = {\n      allow_new_registrations: formData.allow_new_registrations.value,\n      allow_email_registrations: formData.allow_email_registrations.value,\n      allow_email_domains: allowedEmailDomains,\n      login_required: formData.login_required.value,\n      allow_password_login: formData.allow_password_login.value,\n    };\n\n    putLoginSetting(reqParams)\n      .then(() => {\n        Toast.onShow({\n          msg: t('update', { keyPrefix: 'toast' }),\n          variant: 'success',\n        });\n        updateLoginSetting(reqParams);\n      })\n      .catch((err) => {\n        if (err.isError) {\n          const data = handleFormError(err, formData);\n          setFormData({ ...data });\n          const ele = document.getElementById(err.list[0].error_field);\n          scrollToElementTop(ele);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getLoginSetting().then((setting) => {\n      if (setting) {\n        const formMeta = { ...formData };\n        formMeta.allow_new_registrations.value =\n          setting.allow_new_registrations;\n        formMeta.allow_email_registrations.value =\n          setting.allow_email_registrations;\n        formMeta.allow_email_domains.value = '';\n        if (Array.isArray(setting.allow_email_domains)) {\n          formMeta.allow_email_domains.value =\n            setting.allow_email_domains.join('\\n');\n        }\n        formMeta.login_required.value = setting.login_required;\n        formMeta.allow_password_login.value = setting.allow_password_login;\n        setFormData({ ...formMeta });\n      }\n    });\n  }, []);\n\n  const handleOnChange = (data) => {\n    setFormData(data);\n  };\n\n  return (\n    <>\n      <h3 className=\"mb-4\">{t('page_title')}</h3>\n      <SchemaForm\n        schema={schema}\n        formData={formData}\n        onSubmit={onSubmit}\n        uiSchema={uiSchema}\n        onChange={handleOnChange}\n      />\n    </>\n  );\n};\n\nexport default Index;\n"],"names":["Index","t","useTranslation","keyPrefix","Toast","useToast","schema","title","properties","allow_new_registrations","type","description","default","allow_email_registrations","allow_password_login","allow_email_domains","login_required","uiSchema","label","formData","setFormData","useState","initFormData","update","updateLoginSetting","loginSettingStore","_","useEffect","getLoginSetting","then","setting","formMeta","value","Array","isArray","join","_jsxs","_Fragment","children","_jsx","className","SchemaForm","onSubmit","evt","preventDefault","stopPropagation","allowedEmailDomains","split","forEach","li","trim","push","reqParams","putLoginSetting","onShow","msg","variant","catch","err","isError","data","handleFormError","ele","document","getElementById","list","error_field","scrollToElementTop","onChange"],"sourceRoot":""}