{"version":3,"file":"static/js/3124.5f5c3ae8.chunk.js","mappings":"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","sources":["pages/Users/Notifications/components/Achievements/index.tsx","pages/Users/Notifications/components/Inbox/index.tsx","pages/Users/Notifications/index.tsx","webpack://answer-static/./src/pages/Users/Notifications/components/Achievements/index.scss?4028","webpack://answer-static/./src/pages/Users/Notifications/index.scss?7d6a"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ListGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Empty } from '@/components';\n\nimport './index.scss';\n\nconst Achievements = ({ data, handleReadNotification }) => {\n  if (!data) {\n    return null;\n  }\n  if (isEmpty(data)) {\n    return <Empty />;\n  }\n  return (\n    <ListGroup className=\"achievement-wrap rounded-0\">\n      {data.map((item) => {\n        const { comment, question, answer } =\n          item?.object_info?.object_map || {};\n        let url = '';\n        switch (item.object_info.object_type) {\n          case 'question':\n            url = `/questions/${item.object_info.object_id}`;\n            break;\n          case 'answer':\n            url = `/questions/${question}/${item.object_info.object_id}`;\n            break;\n          case 'comment':\n            url = `/questions/${question}/${answer}?commentId=${comment}`;\n            break;\n          default:\n            url = '';\n        }\n        return (\n          <ListGroup.Item\n            key={item.id}\n            className={classNames(\n              'd-flex border-start-0 border-end-0 py-3',\n              !item.is_read && 'warning',\n            )}>\n            {item.rank > 0 && (\n              <div className=\"text-success num text-end\">{`+${item.rank}`}</div>\n            )}\n            {item.rank === 0 && <div className=\"num text-end\">{item.rank}</div>}\n            {item.rank < 0 && (\n              <div className=\"text-danger num text-end\">{`${item.rank}`}</div>\n            )}\n            <div className=\"d-flex flex-column ms-3 flex-fill\">\n              <Link to={url} onClick={() => handleReadNotification(item.id)}>\n                {item.object_info.title}\n              </Link>\n              <span className=\"text-secondary small\">\n                {item.object_info.object_type}\n              </span>\n            </div>\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n};\n\nexport default Achievements;\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ListGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { FormatTime, Empty } from '@/components';\nimport { loggedUserInfoStore } from '@/stores';\n\nconst Inbox = ({ data, handleReadNotification }) => {\n  const { t } = useTranslation('translation', { keyPrefix: 'notifications' });\n  const sessionUser = loggedUserInfoStore((state) => state.user);\n  console.log(sessionUser);\n  if (!data) {\n    return null;\n  }\n  if (isEmpty(data)) {\n    return <Empty />;\n  }\n  const getDisplayName = function (item) {\n    const user = sessionUser;\n    const qDisName = item.user_info?.display_name;\n    if (user.id === item.user_info?.id) {\n      return t('you');\n    }\n    return qDisName;\n  };\n  return (\n    <ListGroup className=\"rounded-0\">\n      {data.map((item) => {\n        const { comment, question, answer } =\n          item?.object_info?.object_map || {};\n        let url = '';\n        switch (item.object_info.object_type) {\n          case 'question':\n            url = `/questions/${item.object_info.object_id}?content_type=${item.object_info.content_type}`;\n            break;\n          case 'answer':\n            url = `/questions/${question}/${item.object_info.object_id}?content_type=${item.object_info.content_type}`;\n            break;\n          case 'comment':\n            url = `/questions/${question}/${answer}?commentId=${comment}&content_type=${item.object_info.content_type}`;\n            break;\n          default:\n            url = '';\n        }\n        return (\n          <ListGroup.Item\n            key={item.id}\n            className={classNames(\n              'py-3 border-start-0 border-end-0',\n              !item.is_read && 'warning',\n            )}>\n            <div>\n              {item.user_info && item.user_info.status !== 'deleted' ? (\n                <Link to={`/users/${item.user_info.username}`}>\n                  {getDisplayName(item)}{' '}\n                </Link>\n              ) : (\n                // someone for anonymous user display\n                <span>{getDisplayName(item) || t('someone')} </span>\n              )}\n              {item.notification_action}{' '}\n              <Link to={url} onClick={() => handleReadNotification(item.id)}>\n                {item.object_info.title}\n              </Link>\n            </div>\n            <div className=\"text-secondary small\">\n              <FormatTime time={item.update_time} />\n            </div>\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n};\n\nexport default Inbox;\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useState, useEffect } from 'react';\nimport { Row, Col, ButtonGroup, Button, Nav } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { usePageTags } from '@/hooks';\nimport {\n  useQueryNotifications,\n  clearUnreadNotification,\n  clearNotificationStatus,\n  readNotification,\n} from '@/services';\nimport { floppyNavigation } from '@/utils';\n\nimport Inbox from './components/Inbox';\nimport Achievements from './components/Achievements';\nimport './index.scss';\n\nconst PAGE_SIZE = 10;\n\nconst Notifications = () => {\n  const [page, setPage] = useState(1);\n  const [notificationData, setNotificationData] = useState<any>([]);\n  const { t } = useTranslation('translation', { keyPrefix: 'notifications' });\n  const inboxTypeNavs = ['all', 'posts', 'invites', 'votes', 'integrals'];\n  const { type = 'inbox', subType = inboxTypeNavs[0] } = useParams();\n\n  const queryParams: {\n    type: string;\n    inbox_type?: string;\n    page: number;\n    page_size: number;\n  } = {\n    type,\n    page,\n    page_size: PAGE_SIZE,\n  };\n  if (type === 'inbox') {\n    queryParams.inbox_type = subType;\n  }\n  const { data, mutate } = useQueryNotifications(queryParams);\n\n  useEffect(() => {\n    clearNotificationStatus(type);\n  }, []);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    if (page > 1) {\n      setNotificationData([...notificationData, ...(data?.list || [])]);\n    } else {\n      setNotificationData(data?.list);\n    }\n  }, [data]);\n  const navigate = useNavigate();\n\n  const handleTypeChange = (evt, val) => {\n    if (!floppyNavigation.shouldProcessLinkClick(evt)) {\n      return;\n    }\n    evt.preventDefault();\n    if (type === val) {\n      return;\n    }\n    setPage(1);\n    setNotificationData([]);\n    navigate(`/users/notifications/${val}`);\n  };\n\n  const handleLoadMore = () => {\n    setPage(page + 1);\n  };\n\n  const handleUnreadNotification = async () => {\n    await clearUnreadNotification(type);\n    mutate();\n  };\n\n  const handleReadNotification = (id) => {\n    readNotification(id);\n  };\n  usePageTags({\n    title: t('notifications', { keyPrefix: 'page_title' }),\n  });\n  return (\n    <Row className=\"pt-4 mb-5\">\n      <Col className=\"page-main flex-auto\">\n        <h3 className=\"mb-4\">{t('title')}</h3>\n        <div className=\"d-flex justify-content-between mb-3\">\n          <ButtonGroup size=\"sm\">\n            <Button\n              as=\"a\"\n              href=\"/users/notifications/inbox\"\n              variant=\"outline-secondary\"\n              active={type === 'inbox'}\n              onClick={(evt) => handleTypeChange(evt, 'inbox')}>\n              {t('inbox')}\n            </Button>\n            <Button\n              as=\"a\"\n              href=\"/users/notifications/achievement\"\n              variant=\"outline-secondary\"\n              active={type === 'achievement'}\n              onClick={(evt) => handleTypeChange(evt, 'achievement')}>\n              {t('achievement')}\n            </Button>\n          </ButtonGroup>\n          <Button\n            size=\"sm\"\n            variant=\"outline-secondary\"\n            onClick={handleUnreadNotification}>\n            {t('all_read')}\n          </Button>\n        </div>\n        {type === 'inbox' && (\n          <>\n            <Nav className=\"inbox-nav small\">\n              {inboxTypeNavs.map((nav) => {\n                const navLinkHref = `/users/notifications/inbox/${nav}`;\n                const navLinkName = t(`inbox_type.${nav}`);\n                return (\n                  <Nav.Item key={nav}>\n                    <Link\n                      to={navLinkHref}\n                      onClick={() => {\n                        setPage(1);\n                      }}\n                      className={classNames('nav-link', {\n                        disabled: nav === subType,\n                      })}>\n                      {navLinkName}\n                    </Link>\n                  </Nav.Item>\n                );\n              })}\n            </Nav>\n            <Inbox\n              data={notificationData}\n              handleReadNotification={handleReadNotification}\n            />\n          </>\n        )}\n        {type === 'achievement' && (\n          <Achievements\n            data={notificationData}\n            handleReadNotification={handleReadNotification}\n          />\n        )}\n        {(data?.count || 0) > PAGE_SIZE * page && (\n          <div className=\"d-flex justify-content-center align-items-center py-3\">\n            <Button\n              variant=\"link\"\n              className=\"btn-no-border\"\n              onClick={handleLoadMore}>\n              {t('show_more')}\n            </Button>\n          </div>\n        )}\n      </Col>\n      <Col className=\"page-right-side\" />\n    </Row>\n  );\n};\n\nexport default Notifications;\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Achievements","data","handleReadNotification","isEmpty","_jsx","Empty","ListGroup","className","children","map","item","_item$object_info","comment","question","answer","object_info","object_map","url","object_type","object_id","_jsxs","Item","classNames","is_read","rank","Link","to","onClick","id","title","Inbox","t","useTranslation","keyPrefix","sessionUser","loggedUserInfoStore","state","user","console","log","getDisplayName","_item$user_info","_item$user_info2","qDisName","user_info","display_name","content_type","status","username","notification_action","FormatTime","time","update_time","Notifications","page","setPage","useState","notificationData","setNotificationData","inboxTypeNavs","type","subType","useParams","queryParams","page_size","inbox_type","mutate","useQueryNotifications","useEffect","clearNotificationStatus","list","navigate","useNavigate","handleTypeChange","evt","val","floppyNavigation","shouldProcessLinkClick","preventDefault","readNotification","usePageTags","Row","Col","ButtonGroup","size","Button","as","href","variant","active","async","clearUnreadNotification","_Fragment","Nav","nav","navLinkHref","navLinkName","disabled","count","handleLoadMore"],"sourceRoot":""}