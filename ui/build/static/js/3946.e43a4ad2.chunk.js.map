{"version":3,"file":"static/js/3946.e43a4ad2.chunk.js","mappings":"qPAkCA,MAmGA,EAnGeA,KACb,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,GAAe,gBACvB,UAAEC,IAAcC,EAAAA,EAAAA,MAChB,KAAEC,EAAMC,OAAQC,IAAwBC,EAAAA,EAAAA,IAAqB,CACjEC,iBAAkBN,IAEdO,GAAQC,EAAAA,EAAAA,OACPC,EAAQC,IAAaC,EAAAA,EAAAA,UAA4B,OACjDC,EAAUC,IAAeF,EAAAA,EAAAA,YAC1BG,EAAqB,IAEpBC,EAAUC,IAAeL,EAAAA,EAAAA,UAAoC,OAEpEM,EAAAA,EAAAA,YAAU,KAAO,IAADC,EACd,IAAKhB,EACH,OAEF,MAAMiB,EAAuC,CAAC,EACxCC,EAAmB,CAAC,EACR,QAAlBF,EAAAhB,EAAKmB,qBAAa,IAAAH,GAAlBA,EAAoBI,SAASC,IAgBL,IAADC,GAfrBL,EAAWI,EAAKE,MAAQ,CACtBC,KAAM,SACNC,MAAOJ,EAAKI,MACZC,YAAaL,EAAKK,YAClBC,QAASN,EAAKO,OAGZP,EAAKQ,mBAAmBC,QAC1Bb,EAAWI,EAAKE,MAAMQ,KAAOV,EAAKQ,QAAQG,KAAKC,GAAWA,EAAOL,QACjEX,EAAWI,EAAKE,MAAMW,UAAYb,EAAKQ,QAAQG,KAC5CC,GAAWA,EAAOE,SAGvBjB,EAAOG,EAAKE,MAAQ,CAAC,EACrBL,EAAOG,EAAKE,MAAM,aAAeF,EAAKG,KAClCH,EAAKe,cACa,QAApBd,EAAKD,EAAKe,kBAAU,IAAAd,GAAhBA,EAAoDe,aACrDhB,EAAKe,WAA4BE,UAChCjB,EAAKe,WACLC,YAEJnB,EAAOG,EAAKE,MAAM,cAAgBF,EAAKe,YAErCf,EAAKT,UACPA,EAAS2B,KAAKlB,EAAKE,KACrB,IAEF,MAAMiB,EAAS,CACbf,OAAW,OAAJzB,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,OAAQ,GACrBX,WACAK,cAEFT,EAAUgC,GACV7B,EAAYO,GACZJ,GAAY2B,EAAAA,EAAAA,KAAcC,EAAAA,EAAAA,IAAaF,GAAS3B,GAAU,GACzD,CAAK,OAAJb,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,gBA6BV,OACEwB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMF,SAAM,OAAJ7C,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,QAC5BuB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CACTzC,OAAQA,EACRG,SAAUA,EACVuC,cAZ0CC,UAC9ChD,GAAqB,EAYjBW,SAAUA,EACVsC,SAnCYC,IAChB,IAAKvC,EACH,OAEFuC,EAAIC,iBACJD,EAAIE,kBACJ,MAAMnC,EAAgB,CAAC,EACvBoC,OAAOC,KAAK3C,GAAUO,SAASqC,IAC7BtC,EAAcsC,GAAO5C,EAAS4C,GAAK7B,KAAK,IAE1C,MAAM8B,EAAS,CACbtD,iBAAkBN,EAClBqB,kBAEFwC,EAAAA,EAAAA,IAAmBD,GAAQE,MAAK,KAC9BvD,EAAMwD,OAAO,CACXC,IAAKlE,EAAE,SAAU,CAAEmE,UAAW,UAC9BC,QAAS,WACT,GACF,EAiBEC,SAZkBC,IACtBpD,EAAYoD,EAAK,MAad,C","sources":["pages/Admin/Plugins/Config/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\n\nimport { useToast } from '@/hooks';\nimport type * as Types from '@/common/interface';\nimport { SchemaForm, JSONSchema, UISchema } from '@/components';\nimport { useQueryPluginConfig, updatePluginConfig } from '@/services';\nimport {\n  InputOptions,\n  FormKit,\n  initFormData,\n  mergeFormData,\n} from '@/components/SchemaForm';\n\nconst Config = () => {\n  const { t } = useTranslation('translation');\n  const { slug_name } = useParams<{ slug_name: string }>();\n  const { data, mutate: refreshPluginConfig } = useQueryPluginConfig({\n    plugin_slug_name: slug_name,\n  });\n  const Toast = useToast();\n  const [schema, setSchema] = useState<JSONSchema | null>(null);\n  const [uiSchema, setUISchema] = useState<UISchema>();\n  const required: string[] = [];\n\n  const [formData, setFormData] = useState<Types.FormDataType | null>(null);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    const properties: JSONSchema['properties'] = {};\n    const uiConf: UISchema = {};\n    data.config_fields?.forEach((item) => {\n      properties[item.name] = {\n        type: 'string',\n        title: item.title,\n        description: item.description,\n        default: item.value,\n      };\n\n      if (item.options instanceof Array) {\n        properties[item.name].enum = item.options.map((option) => option.value);\n        properties[item.name].enumNames = item.options.map(\n          (option) => option.label,\n        );\n      }\n      uiConf[item.name] = {};\n      uiConf[item.name]['ui:widget'] = item.type;\n      if (item.ui_options) {\n        if ((item.ui_options as InputOptions & { input_type })?.input_type) {\n          (item.ui_options as InputOptions).inputType = (\n            item.ui_options as InputOptions & { input_type }\n          ).input_type;\n        }\n        uiConf[item.name]['ui:options'] = item.ui_options;\n      }\n      if (item.required) {\n        required.push(item.name);\n      }\n    });\n    const result = {\n      title: data?.name || '',\n      required,\n      properties,\n    };\n    setSchema(result);\n    setUISchema(uiConf);\n    setFormData(mergeFormData(initFormData(result), formData));\n  }, [data?.config_fields]);\n\n  const onSubmit = (evt) => {\n    if (!formData) {\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    const config_fields = {};\n    Object.keys(formData).forEach((key) => {\n      config_fields[key] = formData[key].value;\n    });\n    const params = {\n      plugin_slug_name: slug_name,\n      config_fields,\n    };\n    updatePluginConfig(params).then(() => {\n      Toast.onShow({\n        msg: t('update', { keyPrefix: 'toast' }),\n        variant: 'success',\n      });\n    });\n  };\n  const refreshConfig: FormKit['refreshConfig'] = async () => {\n    refreshPluginConfig();\n  };\n  const handleOnChange = (form) => {\n    setFormData(form);\n  };\n  return (\n    <>\n      <h3 className=\"mb-4\">{data?.name}</h3>\n      <SchemaForm\n        schema={schema}\n        uiSchema={uiSchema}\n        refreshConfig={refreshConfig}\n        formData={formData}\n        onSubmit={onSubmit}\n        onChange={handleOnChange}\n      />\n    </>\n  );\n};\n\nexport default Config;\n"],"names":["Config","t","useTranslation","slug_name","useParams","data","mutate","refreshPluginConfig","useQueryPluginConfig","plugin_slug_name","Toast","useToast","schema","setSchema","useState","uiSchema","setUISchema","required","formData","setFormData","useEffect","_data$config_fields","properties","uiConf","config_fields","forEach","item","_item$ui_options","name","type","title","description","default","value","options","Array","enum","map","option","enumNames","label","ui_options","input_type","inputType","push","result","mergeFormData","initFormData","_jsxs","_Fragment","children","_jsx","className","SchemaForm","refreshConfig","async","onSubmit","evt","preventDefault","stopPropagation","Object","keys","key","params","updatePluginConfig","then","onShow","msg","keyPrefix","variant","onChange","form"],"sourceRoot":""}