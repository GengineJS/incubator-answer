{"version":3,"file":"static/js/3228.d26a23d8.chunk.js","mappings":"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","sources":["pages/Admin/Interface/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { FC, FormEvent, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useToast } from '@/hooks';\nimport {\n  LangsType,\n  FormDataType,\n  AdminSettingsInterface,\n} from '@/common/interface';\nimport { interfaceStore, loggedUserInfoStore } from '@/stores';\nimport { JSONSchema, SchemaForm, UISchema } from '@/components';\nimport { DEFAULT_TIMEZONE } from '@/common/constants';\nimport {\n  updateInterfaceSetting,\n  useInterfaceSetting,\n  getLoggedUserInfo,\n} from '@/services';\nimport {\n  setupAppLanguage,\n  loadLanguageOptions,\n  setupAppTimeZone,\n} from '@/utils/localize';\nimport { handleFormError, scrollToElementTop } from '@/utils';\n\nconst Interface: FC = () => {\n  const { t } = useTranslation('translation', {\n    keyPrefix: 'admin.interface',\n  });\n  const storeInterface = interfaceStore.getState().interface;\n  const Toast = useToast();\n  const [langs, setLangs] = useState<LangsType[]>();\n  const { data: setting } = useInterfaceSetting();\n\n  const schema: JSONSchema = {\n    title: t('page_title'),\n    properties: {\n      language: {\n        type: 'string',\n        title: t('language.label'),\n        description: t('language.text'),\n        enum: langs?.map((lang) => lang.value),\n        enumNames: langs?.map((lang) => lang.label),\n        default: setting?.language || storeInterface.language,\n      },\n      time_zone: {\n        type: 'string',\n        title: t('time_zone.label'),\n        description: t('time_zone.text'),\n        default: setting?.time_zone || DEFAULT_TIMEZONE,\n      },\n    },\n  };\n\n  const [formData, setFormData] = useState<FormDataType>({\n    language: {\n      value: setting?.language || storeInterface.language,\n      isInvalid: false,\n      errorMsg: '',\n    },\n    time_zone: {\n      value: setting?.time_zone || DEFAULT_TIMEZONE,\n      isInvalid: false,\n      errorMsg: '',\n    },\n  });\n\n  const uiSchema: UISchema = {\n    language: {\n      'ui:widget': 'select',\n    },\n    time_zone: {\n      'ui:widget': 'timezone',\n    },\n  };\n  const getLangs = async () => {\n    const res: LangsType[] = await loadLanguageOptions(true);\n    setLangs(res);\n  };\n\n  const checkValidated = (): boolean => {\n    let ret = true;\n    const { language } = formData;\n    const formCheckData = { ...formData };\n    if (!language.value) {\n      ret = false;\n      formCheckData.language = {\n        value: '',\n        isInvalid: true,\n        errorMsg: t('language.msg'),\n      };\n    }\n    setFormData({\n      ...formCheckData,\n    });\n    return ret;\n  };\n  const onSubmit = (evt: FormEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    if (checkValidated() === false) {\n      return;\n    }\n    const reqParams: AdminSettingsInterface = {\n      language: formData.language.value,\n      time_zone: formData.time_zone.value,\n    };\n\n    updateInterfaceSetting(reqParams)\n      .then(() => {\n        interfaceStore.getState().update(reqParams);\n        setupAppLanguage();\n        setupAppTimeZone();\n        getLoggedUserInfo().then((info) => {\n          loggedUserInfoStore.getState().update(info);\n        });\n        Toast.onShow({\n          msg: t('update', { keyPrefix: 'toast' }),\n          variant: 'success',\n        });\n      })\n      .catch((err) => {\n        if (err.isError) {\n          const data = handleFormError(err, formData);\n          setFormData({ ...data });\n          const ele = document.getElementById(err.list[0].error_field);\n          scrollToElementTop(ele);\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (setting) {\n      const formMeta = {};\n      Object.keys(setting).forEach((k) => {\n        formMeta[k] = { ...formData[k], value: setting[k] };\n      });\n      setFormData({ ...formData, ...formMeta });\n    }\n  }, [setting]);\n  useEffect(() => {\n    getLangs();\n  }, []);\n\n  const handleOnChange = (data) => {\n    setFormData(data);\n  };\n  return (\n    <>\n      <h3 className=\"mb-4\">{t('page_title')}</h3>\n      <SchemaForm\n        schema={schema}\n        uiSchema={uiSchema}\n        formData={formData}\n        onSubmit={onSubmit}\n        onChange={handleOnChange}\n      />\n    </>\n  );\n};\n\nexport default Interface;\n"],"names":["Interface","t","useTranslation","keyPrefix","storeInterface","interfaceStore","getState","interface","Toast","useToast","langs","setLangs","useState","data","setting","useInterfaceSetting","schema","title","properties","language","type","description","enum","map","lang","value","enumNames","label","default","time_zone","DEFAULT_TIMEZONE","formData","setFormData","isInvalid","errorMsg","useEffect","formMeta","Object","keys","forEach","k","async","res","loadLanguageOptions","getLangs","_jsxs","_Fragment","children","_jsx","className","SchemaForm","uiSchema","onSubmit","evt","preventDefault","stopPropagation","checkValidated","ret","formCheckData","reqParams","updateInterfaceSetting","then","update","setupAppLanguage","setupAppTimeZone","getLoggedUserInfo","info","loggedUserInfoStore","onShow","msg","variant","catch","err","isError","handleFormError","ele","document","getElementById","list","error_field","scrollToElementTop","onChange"],"sourceRoot":""}