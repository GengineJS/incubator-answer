{"version":3,"file":"static/js/6211.1685792a.chunk.js","mappings":"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","sources":["pages/Questions/Detail/components/WriteAnswer/index.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { memo, useState, FC, useEffect } from 'react';\nimport { Form, Button, Alert, Badge } from 'react-bootstrap';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport { marked } from 'marked';\nimport classNames from 'classnames';\n\nimport { usePromptWithUnload } from '@/hooks';\nimport { useCaptchaPlugin } from '@/utils/pluginKit';\nimport { Editor, Icon, Modal, TextArea, AILoading } from '@/components';\nimport { FormDataType, PostAnswerReq } from '@/common/interface';\nimport { postAIAnswer, postAnswer } from '@/services';\nimport { guard, handleFormError, SaveDraft, storageExpires } from '@/utils';\nimport { DRAFT_ANSWER_STORAGE_KEY } from '@/common/constants';\nimport { loggedUserInfoStore, writeSettingStore } from '@/stores';\nimport { SseService } from '@/common/functions';\n\ninterface Props {\n  visible?: boolean;\n  data: {\n    /** question  id */\n    qid: string;\n    aiAnswered?: boolean;\n    answered?: boolean;\n    loggedUserRank: number;\n    first_answer_id?: string;\n  };\n  callback?: (obj) => void;\n}\n\nconst saveDraft = new SaveDraft({ type: 'answer' });\n\nconst Index: FC<Props> = ({ visible = false, data, callback }) => {\n  const { t } = useTranslation('translation', {\n    keyPrefix: 'question_detail.write_answer',\n  });\n  const [formData, setFormData] = useState<FormDataType>({\n    content: {\n      value: '',\n      isInvalid: false,\n      errorMsg: '',\n    },\n  });\n  const [showEditor, setShowEditor] = useState<boolean>(visible);\n  const [focusType, setFocusType] = useState('');\n  const [editorFocusState, setEditorFocusState] = useState(false);\n  const [hasDraft, setHasDraft] = useState(false);\n  const [showTips, setShowTips] = useState(data.loggedUserRank < 100);\n  const aCaptcha = useCaptchaPlugin('answer');\n  const writeInfo = writeSettingStore((state) => state.write);\n  const [editorCanSave, setEditorCanSave] = useState(false);\n  const [aiLoading, setAILoading] = useState(false);\n  usePromptWithUnload({\n    when: Boolean(formData.content.value),\n  });\n  const userInfo = loggedUserInfoStore((state) => state.user);\n  SseService.GetInstance().addAICallback('AIHandle', (eve) => {\n    if (!aiLoading) {\n      return;\n    }\n    const info = eve.data;\n    const answerInfo = JSON.parse(info);\n    if (answerInfo.user_id === userInfo.id) {\n      SseService.GetInstance().removeAIEventListener();\n      setAILoading(false);\n      window.location.reload();\n    }\n  });\n  const removeDraft = () => {\n    // immediately remove debounced save\n    saveDraft.save.cancel();\n    saveDraft.remove();\n    setHasDraft(false);\n  };\n\n  useEffect(() => {\n    const draft = storageExpires.get(DRAFT_ANSWER_STORAGE_KEY);\n    if (draft?.questionId === data.qid && draft?.content) {\n      setShowEditor(true);\n      setFormData({\n        content: {\n          value: draft.content,\n          isInvalid: false,\n          errorMsg: '',\n        },\n      });\n      setHasDraft(true);\n    }\n    setTimeout(() => {\n      setEditorCanSave(true);\n    }, 100);\n  }, []);\n\n  useEffect(() => {\n    const draft = storageExpires.get(DRAFT_ANSWER_STORAGE_KEY);\n    const { content } = formData;\n\n    if (content.value) {\n      // save Draft\n      saveDraft.save({\n        questionId: data?.qid,\n        content: content.value,\n      });\n\n      setHasDraft(true);\n    } else if (draft?.questionId === data.qid && !content.value) {\n      removeDraft();\n    }\n  }, [formData.content.value]);\n\n  const checkValidated = (): boolean => {\n    let bol = true;\n    const { content } = formData;\n\n    if (!content.value || Array.from(content.value.trim()).length < 6) {\n      bol = false;\n      formData.content = {\n        value: content.value,\n        isInvalid: true,\n        errorMsg: t('characters'),\n      };\n    } else {\n      formData.content = {\n        value: content.value,\n        isInvalid: false,\n        errorMsg: '',\n      };\n    }\n\n    setFormData({\n      ...formData,\n    });\n    return bol;\n  };\n\n  const resetForm = () => {\n    setFormData({\n      content: {\n        value: '',\n        isInvalid: false,\n        errorMsg: '',\n      },\n    });\n  };\n\n  const deleteDraft = () => {\n    const res = window.confirm(t('discard_confirm', { keyPrefix: 'draft' }));\n    if (res) {\n      removeDraft();\n      resetForm();\n    }\n  };\n\n  const submitAnswer = (isAI: boolean = false) => {\n    const params: PostAnswerReq = {\n      question_id: data?.qid,\n      content: isAI ? 'AIReply' : formData.content.value,\n      html: marked.parse(formData.content.value),\n    };\n    const imgCode = aCaptcha?.getCaptcha();\n    if (imgCode?.verify) {\n      params.captcha_code = imgCode.captcha_code;\n      params.captcha_id = imgCode.captcha_id;\n    }\n    (isAI ? postAIAnswer(params) : postAnswer(params))\n      .then(async (res) => {\n        await aCaptcha?.close();\n        setShowEditor(false);\n        setFormData({\n          content: {\n            value: '',\n            isInvalid: false,\n            errorMsg: '',\n          },\n        });\n        removeDraft();\n        callback?.(res.info);\n        if (isAI) {\n          SseService.GetInstance().removeAIEventListener();\n          setAILoading(false);\n        }\n      })\n      .catch((ex) => {\n        if (ex.isError) {\n          aCaptcha?.handleCaptchaError(ex.list);\n          const stateData = handleFormError(ex, formData);\n          setFormData({ ...stateData });\n        }\n      });\n  };\n\n  const handleSubmit = () => {\n    if (!guard.tryNormalLogged(true)) {\n      return;\n    }\n    if (!checkValidated()) {\n      return;\n    }\n    if (!aCaptcha) {\n      submitAnswer();\n      return;\n    }\n    aCaptcha.check(() => submitAnswer());\n  };\n\n  const clickAIBtn = () => {\n    if (!guard.tryNormalLogged(true)) {\n      return;\n    }\n    SseService.GetInstance().addAIEventListener();\n    setAILoading(true);\n    submitAnswer(true);\n  };\n\n  const clickBtn = () => {\n    if (!guard.tryNormalLogged(true)) {\n      return;\n    }\n\n    if (data?.answered && !showEditor) {\n      Modal.confirm({\n        title: t('confirm_title'),\n        content: t('confirm_info'),\n        confirmText: t('continue'),\n        onConfirm: () => {\n          setShowEditor(true);\n        },\n      });\n      return;\n    }\n\n    if (!showEditor) {\n      setShowEditor(true);\n      return;\n    }\n\n    handleSubmit();\n  };\n  const handleFocusForTextArea = (evt) => {\n    if (!guard.tryNormalLogged(true)) {\n      evt.currentTarget.blur();\n      return;\n    }\n    setFocusType('answer');\n    setShowEditor(true);\n    setEditorFocusState(true);\n  };\n  return (\n    <Form noValidate className=\"mt-4\">\n      <AILoading loading={aiLoading} color=\"#3f51b5\" />\n      {(!data.answered || showEditor) && (\n        <Form.Group className=\"mb-3\">\n          <Form.Label>\n            <h5>{t('title')}</h5>\n          </Form.Label>\n          <Form.Control\n            isInvalid={formData.content.isInvalid}\n            className=\"d-none\"\n          />\n          {!showEditor && !data.answered && (\n            <div className=\"d-flex\">\n              <TextArea\n                className=\"w-100\"\n                rows={8}\n                autoFocus={false}\n                onFocus={handleFocusForTextArea}\n              />\n            </div>\n          )}\n          {showEditor && (\n            <>\n              <Editor\n                className={classNames(\n                  'form-control p-0',\n                  focusType === 'answer' && 'focus',\n                )}\n                value={formData.content.value}\n                autoFocus={editorFocusState}\n                onChange={(val) => {\n                  if (editorCanSave) {\n                    setFormData({\n                      content: {\n                        value: val,\n                        isInvalid: false,\n                        errorMsg: '',\n                      },\n                    });\n                  }\n                }}\n                onFocus={() => {\n                  setFocusType('answer');\n                }}\n                onBlur={() => {\n                  setFocusType('');\n                }}\n              />\n\n              <Alert\n                variant=\"warning\"\n                show={data.loggedUserRank < 100 && showTips}\n                onClose={() => setShowTips(false)}\n                dismissible\n                className=\"mt-3\">\n                <p>{t('tips.header_1')}</p>\n                <ul>\n                  <li>\n                    <Trans\n                      i18nKey=\"question_detail.write_answer.tips.li1_1\"\n                      components={{ strong: <strong /> }}\n                    />\n                  </li>\n                  <li>{t('tips.li1_2')}</li>\n                </ul>\n                <p>\n                  <Trans\n                    i18nKey=\"question_detail.write_answer.tips.header_2\"\n                    components={{ strong: <strong /> }}\n                  />\n                </p>\n                <ul className=\"mb-0\">\n                  <li>{t('tips.li2_1')}</li>\n                </ul>\n              </Alert>\n            </>\n          )}\n\n          <Form.Control.Feedback type=\"invalid\">\n            {formData.content.errorMsg}\n          </Form.Control.Feedback>\n        </Form.Group>\n      )}\n\n      {data.answered && !showEditor ? (\n        // the 0th answer is the oldest one\n        <Link\n          to={`/posts/${data.qid}/${data.first_answer_id}/edit`}\n          className=\"btn btn-primary\">\n          {t('edit_answer')}\n        </Link>\n      ) : (\n        <>\n          <Button className=\"me-3\" onClick={clickBtn}>\n            {t('btn_name')}\n          </Button>\n          {!data.aiAnswered ? (\n            <Button onClick={clickAIBtn}>{t('btn_ai_name')}</Button>\n          ) : (\n            <div className=\"lh-1 btn m-0\">\n              <Badge bg=\"secondary\" pill>\n                <Icon name=\"check-circle-fill  me-1\" />\n                {t('ai_answered')}\n              </Badge>\n            </div>\n          )}\n        </>\n      )}\n\n      {data.answered && !showEditor && !writeInfo.restrict_answer && (\n        <Button onClick={clickBtn} className=\"ms-2 \" variant=\"outline-primary\">\n          {t('add_another_answer')}\n        </Button>\n      )}\n\n      {hasDraft && (\n        <Button variant=\"link\" className=\"ms-2\" onClick={deleteDraft}>\n          {t('discard_draft', { keyPrefix: 'btns' })}\n        </Button>\n      )}\n    </Form>\n  );\n};\n\nexport default memo(Index);\n"],"names":["saveDraft","SaveDraft","type","Index","visible","data","callback","t","useTranslation","keyPrefix","formData","setFormData","useState","content","value","isInvalid","errorMsg","showEditor","setShowEditor","focusType","setFocusType","editorFocusState","setEditorFocusState","hasDraft","setHasDraft","showTips","setShowTips","loggedUserRank","aCaptcha","useCaptchaPlugin","writeInfo","writeSettingStore","state","write","editorCanSave","setEditorCanSave","aiLoading","setAILoading","usePromptWithUnload","when","Boolean","userInfo","loggedUserInfoStore","user","SseService","GetInstance","addAICallback","eve","info","JSON","parse","user_id","id","removeAIEventListener","window","location","reload","removeDraft","save","cancel","remove","useEffect","draft","storageExpires","get","DRAFT_ANSWER_STORAGE_KEY","questionId","qid","setTimeout","submitAnswer","isAI","params","question_id","html","marked","imgCode","getCaptcha","verify","captcha_code","captcha_id","postAIAnswer","postAnswer","then","async","close","res","catch","ex","isError","handleCaptchaError","list","stateData","handleFormError","handleSubmit","guard","checkValidated","bol","Array","from","trim","length","check","clickBtn","answered","Modal","confirm","title","confirmText","onConfirm","_jsxs","Form","noValidate","className","children","_jsx","AILoading","loading","color","Group","Label","Control","TextArea","rows","autoFocus","onFocus","evt","currentTarget","blur","_Fragment","Editor","classNames","onChange","val","onBlur","Alert","variant","show","onClose","dismissible","Trans","i18nKey","components","strong","Feedback","Link","to","first_answer_id","Button","onClick","aiAnswered","Badge","bg","pill","Icon","name","clickAIBtn","addAIEventListener","restrict_answer","deleteDraft","memo"],"sourceRoot":""}